From nestor at berlios.de  Mon Jul 18 21:12:28 2005
From: nestor at berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 18 Jul 2005 21:12:28 +0200
Subject: [Mspace-checkins] r503 - ComponentModel/trunk/src/ComponentModel.Container
Message-ID: <200507181912.j6IJCSF8013409@sheep.berlios.de>

Author: nestor
Date: 2005-07-18 21:12:23 +0200 (Mon, 18 Jul 2005)
New Revision: 503

Modified:
   ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs
Log:
Added Executor Service into Container.


Modified: ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs
===================================================================
--- ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs	2005-05-16 21:27:53 UTC (rev 502)
+++ ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs	2005-07-18 19:12:23 UTC (rev 503)
@@ -6,6 +6,7 @@
 using ComponentModel.Interfaces;
 using ComponentModel.Container.Dao;
 using ComponentModel.Exceptions;
+using ComponentModel.VO;
 using NLog;
 
 
@@ -121,5 +122,23 @@
                 componentList.Remove (component);
             }
         }
+
+        /*Servicio ejecutor*/
+        public ResponseMethodVO Execute (string componentName, string methodName, object[] parameters, bool redirect, IViewHandler viewHandler, bool block) {
+            IComponentModel componentModel = this.GetComponentByName (componentName);
+            return componentModel.Execute (methodName, parameters, redirect, viewHandler, block);
+        }
+
+        public ResponseMethodVO Execute (string componentName, string methodName, object[] parameters, IViewHandler viewHandler) {
+            return this.Execute (componentName, methodName, parameters, true, viewHandler, true);
+        }       
+
+        public ResponseMethodVO Execute (string componentName, string methodName, object[] parameters, bool redirect) {
+            return this.Execute (componentName, methodName, parameters, redirect, null, true);
+        }
+
+        public ResponseMethodVO Execute (string componentName, string methodName, object[] parameters) {
+            return this.Execute (componentName, methodName, parameters, true, null, true);
+        }
     }
 }



From nestor at berlios.de  Tue Jul 19 22:19:08 2005
From: nestor at berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 19 Jul 2005 22:19:08 +0200
Subject: [Mspace-checkins] r504 - in ComponentModel/trunk: ComponentTest/src/Components/Saludator/Bo ComponentTest/src/Components/Saludator/Exceptions ComponentTest/src/Components/Saludator/Form src src/ComponentModel.Container src/ComponentModel.Interfaces src/ComponentModel.Threading
Message-ID: <200507192019.j6JKJ8iC012294@sheep.berlios.de>

Author: nestor
Date: 2005-07-19 22:19:08 +0200 (Tue, 19 Jul 2005)
New Revision: 504

Modified:
   ComponentModel/trunk/ComponentTest/src/Components/Saludator/Bo/SaludatorComponentModel.cs
   ComponentModel/trunk/ComponentTest/src/Components/Saludator/Exceptions/SaludatorExceptionManager.cs
   ComponentModel/trunk/ComponentTest/src/Components/Saludator/Form/SaludatorForm.cs
   ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs
   ComponentModel/trunk/src/ComponentModel.Interfaces/IComponentModel.cs
   ComponentModel/trunk/src/ComponentModel.Threading/ComponentActionDispatcher.cs
   ComponentModel/trunk/src/DefaultComponentModel.cs
Log:
Experimental support of Virtual Methods.



Modified: ComponentModel/trunk/ComponentTest/src/Components/Saludator/Bo/SaludatorComponentModel.cs
===================================================================
--- ComponentModel/trunk/ComponentTest/src/Components/Saludator/Bo/SaludatorComponentModel.cs	2005-07-18 19:12:23 UTC (rev 503)
+++ ComponentModel/trunk/ComponentTest/src/Components/Saludator/Bo/SaludatorComponentModel.cs	2005-07-19 20:19:08 UTC (rev 504)
@@ -18,7 +18,7 @@
         public int Saluda () {
             Console.WriteLine ("//-----------------//");
             Console.WriteLine ("Que pasa co !!");
-            throw new Exception ("Yeahhhh");
+            //throw new Exception ("Yeahhhh");
             Console.WriteLine ("//-----------------//");
             return 1;
         }

Modified: ComponentModel/trunk/ComponentTest/src/Components/Saludator/Exceptions/SaludatorExceptionManager.cs
===================================================================
--- ComponentModel/trunk/ComponentTest/src/Components/Saludator/Exceptions/SaludatorExceptionManager.cs	2005-07-18 19:12:23 UTC (rev 503)
+++ ComponentModel/trunk/ComponentTest/src/Components/Saludator/Exceptions/SaludatorExceptionManager.cs	2005-07-19 20:19:08 UTC (rev 504)
@@ -11,6 +11,7 @@
         public override void ProcessException (Exception exception) {
             base.ProcessException (exception);
             Console.WriteLine ("Ha ocurrido una exception." + exception.Message);
+            Console.WriteLine (exception.ToString ());
         }
     }
 }

Modified: ComponentModel/trunk/ComponentTest/src/Components/Saludator/Form/SaludatorForm.cs
===================================================================
--- ComponentModel/trunk/ComponentTest/src/Components/Saludator/Form/SaludatorForm.cs	2005-07-18 19:12:23 UTC (rev 503)
+++ ComponentModel/trunk/ComponentTest/src/Components/Saludator/Form/SaludatorForm.cs	2005-07-19 20:19:08 UTC (rev 504)
@@ -9,7 +9,8 @@
 {
 	public class SaludatorForm : System.Windows.Forms.Form, IViewHandler
 	{
-		private System.Windows.Forms.Button button1;
+		private Button button1;
+                private Button button2;
 		private bool changeButton;
                 
                 public SaludatorForm() : base ()
@@ -21,7 +22,8 @@
 		
 		private void InitializeComponent() {
 			this.button1 = new System.Windows.Forms.Button();
-			this.SuspendLayout();
+			this.button2 = new Button ();
+                        this.SuspendLayout();
 			// 
 			// button1
 			// 
@@ -31,17 +33,34 @@
 			this.button1.TabIndex = 0;
 			this.button1.Text = "button1";
 			this.button1.Click += new System.EventHandler(this.Button1Click);
-			// 
+			
+                        this.button2.Location = new Point (200, 96);
+                        this.button2.Size = new Size (88, 40);
+                        this.button1.TabIndex = 0;
+                        this.button2.Click += new EventHandler (this.Button2Click);
+                        this.button2.Text = "Hello from container";
+                        // 
 			// MainForm
 			// 
 			this.AutoScaleBaseSize = new System.Drawing.Size(6, 15);
 			this.ClientSize = new System.Drawing.Size(292, 266);
 			this.Controls.Add(this.button1);
+                        this.Controls.Add (this.button2);
 			this.Name = "MainForm";
 			this.Text = "MainForm";
 			this.ResumeLayout(false);
                 }
-
+                
+                void Virtual (ResponseMethodVO responseMethodVO) {
+                    Console.WriteLine ("Que pasa nenggg, soy el fucking virtual !!");
+                }
+                
+                
+                void Button2Click (object sender, EventArgs evt) {
+                    DefaultContainer.Instance.GetComponentByName ("Saludator").VirtualMethod += new VirtualMethod (this.Virtual);
+                    DefaultContainer.Instance.Execute ("Saludator", "SaludaATodos", null, this);
+                }
+                
 		void Button1Click(object sender, System.EventArgs ev) {
                     DefaultComponentModel dcm = (DefaultComponentModel) DefaultContainer.Instance.GetComponentByName ("Saludator"); 
                     //dcm.Execute ("Saluda", null);

Modified: ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs
===================================================================
--- ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs	2005-07-18 19:12:23 UTC (rev 503)
+++ ComponentModel/trunk/src/ComponentModel.Container/DefaultContainer.cs	2005-07-19 20:19:08 UTC (rev 504)
@@ -13,7 +13,8 @@
 namespace ComponentModel.Container {
     public class DefaultContainer : IContainer {
         private static DefaultContainer instance = null; 
-        private IList componentList;
+        //private IList componentList;
+        private Hashtable componentHashtable;
         //Logging
         Logger logger = LogManager.GetLogger ("ComponentModel.Container.DefaultContainer");
         
@@ -28,7 +29,8 @@
             //MONO_PATH
             this.LoadAssembliesInPath ();
             //Getting data from assembly resolv.
-            componentList = new ArrayList ();
+            //componentList = new ArrayList ();
+            componentHashtable = new Hashtable ();
             //En cada ensamblado, cargar? el / los componente y lo registrar? con el
             //nombre que se le ha dado al atributo.
             GetAllComponents (); 
@@ -76,7 +78,7 @@
                 this.Add (defaultComponentModel); 
             }
             logger.Debug ("Exiting RegisterComponent.");
-            logger.Info ("Container has : " + componentList.Count + " Components Registered.");
+            logger.Info ("Container has : " + componentHashtable.Count + " Components Registered.");
         }
         
         public static DefaultContainer Instance {
@@ -88,12 +90,17 @@
         }
 
         public IComponentModel GetComponentByName (string componentName) {
-            for (int i = 0; i < componentList.Count; i++) {
-                if ((componentList[i] as DefaultComponentModel).VO.ComponentName.Equals (componentName)) {
-                    return (IComponentModel)componentList[i];
-                }
+            //for (int i = 0; i < componentList.Count; i++) {
+            //    if ((componentList[i] as DefaultComponentModel).VO.ComponentName.Equals (componentName)) {
+            //        return (IComponentModel)componentList[i];
+            //    }
+            //}
+            try {
+                return (IComponentModel)componentHashtable[componentName];
             }
-            throw new ComponentNotFoundException ("Component " + componentName + " not found in container.");
+            catch (Exception e) {
+                throw new ComponentNotFoundException ("Component " + componentName + " not found in container.");
+            }
             //return null;
         }
 
@@ -103,24 +110,25 @@
              * sistema no se permite m?s de una instancia, as? que con pasarle
              * la referencia ser? suficiente.
              */
-            if (componentList.Contains (component))
-                return;
+            //if (componentList.Contains (component))
+            //    return;
             /*Chequeamos que no existan dos componentes con el mismo nombre.*/
-            for (int i = 0; i< componentList.Count; i++) {
-                if (((IComponentModel)componentList[i]).VO.ComponentName.Equals (component.VO.ComponentName)) {
+            //for (int i = 0; i< componentList.Count; i++) {
+            //    if (((IComponentModel)componentList[i]).VO.ComponentName.Equals (component.VO.ComponentName)) {
                     /*No lanzo una excepci?n porque no se debe parar la
                      * ejecuci?n del programa por este error.*/
-                    return;
-                }
-            }
-            componentList.Add (component);
+            //        return;
+            //    }
+            //}
+            componentHashtable.Add (component.VO.ComponentName, component);
             logger.Info ("Registering component: " + component + " as Name: " + component.VO.ComponentName);
         }
 
         public void Remove (IComponentModel component) {
-            if (componentList.Contains (component)) {
-                componentList.Remove (component);
-            }
+            //if (componentList.Contains (component)) {
+            //    componentList.Remove (component);
+            //}
+            componentHashtable.Remove (component.VO.ComponentName);
         }
 
         /*Servicio ejecutor*/

Modified: ComponentModel/trunk/src/ComponentModel.Interfaces/IComponentModel.cs
===================================================================
--- ComponentModel/trunk/src/ComponentModel.Interfaces/IComponentModel.cs	2005-07-18 19:12:23 UTC (rev 503)
+++ ComponentModel/trunk/src/ComponentModel.Interfaces/IComponentModel.cs	2005-07-19 20:19:08 UTC (rev 504)
@@ -2,9 +2,12 @@
 using ComponentModel.VO;
 
 namespace ComponentModel.Interfaces {
+    public delegate void VirtualMethod (ResponseMethodVO responseMethodVO);
+    
     public interface IComponentModel {
         ComponentModelVO VO {get;}
-
+        VirtualMethod VirtualMethod {get; set;}
+        
         ResponseMethodVO Execute (string methodName, object[] parameters);//Redirige & bloquea a la vista por defecto.
         ResponseMethodVO Execute (string methodName, object[] parameters, IViewHandler viewHandler);//Redirige y elige vista.
         ResponseMethodVO Execute (string methodName, object[] parameters, bool redirect);//Redirige o no redirige, si redirige vista nueva.

Modified: ComponentModel/trunk/src/ComponentModel.Threading/ComponentActionDispatcher.cs
===================================================================
--- ComponentModel/trunk/src/ComponentModel.Threading/ComponentActionDispatcher.cs	2005-07-18 19:12:23 UTC (rev 503)
+++ ComponentModel/trunk/src/ComponentModel.Threading/ComponentActionDispatcher.cs	2005-07-19 20:19:08 UTC (rev 504)
@@ -70,6 +70,10 @@
                 object ret = methodToExecute.Invoke (componentModel, parameters);
                 responseMethodVO.MethodResult = ret;
                 responseMethodVO.SetExecutionSuccess (true);
+                if (componentModel.VirtualMethod != null) {
+                    componentModel.VirtualMethod (responseMethodVO);
+                    componentModel.VirtualMethod = null;
+                }
                 object obj = viewType.GetConstructor (null).Invoke (null);
                 methodToResponse.Invoke (obj, new object[] {responseMethodVO});
             }
@@ -81,6 +85,10 @@
                 object ret = methodToExecute.Invoke (componentModel, parameters);
                 responseMethodVO.MethodResult = ret;
                 responseMethodVO.SetExecutionSuccess (true);
+                if (componentModel.VirtualMethod != null) {
+                    componentModel.VirtualMethod (responseMethodVO);
+                    componentModel.VirtualMethod = null;
+                }
                 methodToResponse.Invoke (viewHandler, new object[] {responseMethodVO});
             }
         }
@@ -91,6 +99,10 @@
                 object ret = methodToExecute.Invoke (componentModel, parameters);
                 responseMethodVO.MethodResult = ret;
                 responseMethodVO.SetExecutionSuccess (true);
+                if (componentModel.VirtualMethod != null) {
+                    componentModel.VirtualMethod (responseMethodVO);
+                    componentModel.VirtualMethod = null;
+                }
             }
         }
 

Modified: ComponentModel/trunk/src/DefaultComponentModel.cs
===================================================================
--- ComponentModel/trunk/src/DefaultComponentModel.cs	2005-07-18 19:12:23 UTC (rev 503)
+++ ComponentModel/trunk/src/DefaultComponentModel.cs	2005-07-19 20:19:08 UTC (rev 504)
@@ -19,6 +19,13 @@
         //Exception manager to process exceptions.
         private IExceptionManager defaultExceptionManager;
 
+        private VirtualMethod virtualMethod;
+
+        public VirtualMethod VirtualMethod {
+            get {return virtualMethod;}
+            set {virtualMethod = value;}
+        }
+        
         public IExceptionManager DefaultExceptionManager {
             get {return defaultExceptionManager;}
             set {defaultExceptionManager = value;}
@@ -138,6 +145,10 @@
                 responseMethodVO.MethodResult = ret;
                 object obj = viewType.GetConstructor (null).Invoke (null);
                 responseMethodVO.SetExecutionSuccess (true);
+                if (VirtualMethod != null) {
+                    VirtualMethod (responseMethodVO);
+                    VirtualMethod = null;
+                }
                 methodToResponse.Invoke (obj, new object[] {responseMethodVO});
                 return responseMethodVO;
             }
@@ -153,6 +164,10 @@
                 object ret = methodToExecute.Invoke (this, parameters);
                 responseMethodVO.MethodResult = ret;
                 responseMethodVO.SetExecutionSuccess (true);
+                if (VirtualMethod != null) {
+                    VirtualMethod (responseMethodVO);
+                    VirtualMethod = null;
+                }
                 methodToResponse.Invoke (viewHandler, new object[] {responseMethodVO});
             }
             catch (TargetInvocationException exception) {
@@ -167,6 +182,10 @@
                 object ret = methodToExecute.Invoke (this, parameters);
                 responseMethodVO.MethodResult = ret;
                 responseMethodVO.SetExecutionSuccess (true);
+                if (VirtualMethod != null) {
+                    VirtualMethod (responseMethodVO);
+                    VirtualMethod = null;
+                }
             }
             catch (TargetInvocationException exception) {
                 this.MapException (exception);



