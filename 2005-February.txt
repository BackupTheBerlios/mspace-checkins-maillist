From nestor at sheep.berlios.de  Sun Feb 13 23:42:13 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Sun, 13 Feb 2005 23:42:13 +0100
Subject: [Mspace-checkins] r309 - / mvim
Message-ID: <200502132242.j1DMgDQE002690@sheep.berlios.de>

Author: nestor
Date: 2005-02-13 23:42:12 +0100 (Sun, 13 Feb 2005)
New Revision: 309

Added:
   mvim/
   mvim/branches/
   mvim/releases/
   mvim/trunk/
Log:
Added Mvim module.





From nestor at sheep.berlios.de  Mon Feb 14 00:26:03 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 00:26:03 +0100
Subject: [Mspace-checkins] r310 - /
Message-ID: <200502132326.j1DNQ3p4005922@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 00:25:58 +0100 (Mon, 14 Feb 2005)
New Revision: 310

Added:
   mvim/
Removed:
   mvim/
Log:
Que me he liao !!





From nestor at sheep.berlios.de  Mon Feb 14 00:26:49 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 00:26:49 +0100
Subject: [Mspace-checkins] r311 - in mvim: . trunk trunk/doc
Message-ID: <200502132326.j1DNQnfQ005998@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 00:26:47 +0100 (Mon, 14 Feb 2005)
New Revision: 311

Added:
   mvim/trunk/
   mvim/trunk/doc/
   mvim/trunk/doc/log4net.dll
Log:
Added Source


Added: mvim/trunk/doc/log4net.dll
===================================================================
--- mvim/trunk/doc/log4net.dll	2005-02-13 23:25:58 UTC (rev 310)
+++ mvim/trunk/doc/log4net.dll	2005-02-13 23:26:47 UTC (rev 311)
@@ -0,0 +1 @@
+link ../src/lib/log4net.dll
\ No newline at end of file


Property changes on: mvim/trunk/doc/log4net.dll
___________________________________________________________________
Name: svn:special
   + *



From nestor at sheep.berlios.de  Mon Feb 14 02:02:31 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 02:02:31 +0100
Subject: [Mspace-checkins] r312 - /
Message-ID: <200502140102.j1E12VPm007181@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 02:01:28 +0100 (Mon, 14 Feb 2005)
New Revision: 312

Removed:
   mvim/
Log:
Me he liado un poco.




From nestor at sheep.berlios.de  Mon Feb 14 02:03:37 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 02:03:37 +0100
Subject: [Mspace-checkins] r314 - / mvim mvim/trunk
Message-ID: <200502140103.j1E13bsH007411@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 02:03:07 +0100 (Mon, 14 Feb 2005)
New Revision: 314

Added:
   mvim/
   mvim/trunk/
   mvim/trunk/doc/
Log:
Lio.




From nestor at sheep.berlios.de  Mon Feb 14 02:05:17 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 02:05:17 +0100
Subject: [Mspace-checkins] r315 - /
Message-ID: <200502140105.j1E15HfC007811@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 02:04:53 +0100 (Mon, 14 Feb 2005)
New Revision: 315

Removed:
   mvim/
Log:
Me he liao





From nestor at sheep.berlios.de  Mon Feb 14 09:59:29 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 09:59:29 +0100
Subject: [Mspace-checkins] r317 - / mvim mvim/trunk mvim/trunk/doc mvim/trunk/doc/design mvim/trunk/src mvim/trunk/src/lib mvim/trunk/src/org.vim.Components mvim/trunk/src/org.vim.Components/BufferedVimControl mvim/trunk/src/org.vim.Components/BufferedVimControl/Model mvim/trunk/src/org.vim.Components/VimBuffer mvim/trunk/src/org.vim.Components/VimBuffer/Model mvim/trunk/src/org.vim.Components/VimControl mvim/trunk/src/org.vim.Components/VimControl/Model mvim/trunk/src/org.vim.Components/VimEntry mvim/trunk/src/org.vim.Components/VimEntry/Controller mvim/trunk/src/org.vim.Components/VimEntry/Model mvim/trunk/src/org.vim.Components/VimEntry/View mvim/trunk/src/resources
Message-ID: <200502140859.j1E8xTHP003924@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 09:59:27 +0100 (Mon, 14 Feb 2005)
New Revision: 317

Added:
   mvim/
   mvim/branches/
   mvim/releases/
   mvim/trunk/
   mvim/trunk/AUTHORS
   mvim/trunk/COPYING
   mvim/trunk/ChangeLog
   mvim/trunk/INSTALL
   mvim/trunk/Makefile.am
   mvim/trunk/NEWS
   mvim/trunk/README
   mvim/trunk/autogen.sh
   mvim/trunk/configure.in
   mvim/trunk/doc/
   mvim/trunk/doc/Makefile.am
   mvim/trunk/doc/design/
   mvim/trunk/doc/design/MonoVim.txt
   mvim/trunk/doc/log4net.dll
   mvim/trunk/doc/monodocer.exe
   mvim/trunk/doc/org.vim.source
   mvim/trunk/src/
   mvim/trunk/src/AssemblyInfo.cs.in
   mvim/trunk/src/Launcher.cs
   mvim/trunk/src/Makefile.am
   mvim/trunk/src/MonoVim.exe.config
   mvim/trunk/src/lib/
   mvim/trunk/src/lib/log4net.dll
   mvim/trunk/src/log4net.dll
   mvim/trunk/src/monovim
   mvim/trunk/src/org.vim.Components/
   mvim/trunk/src/org.vim.Components/BufferedVimControl/
   mvim/trunk/src/org.vim.Components/BufferedVimControl/BufferedVimMain.cs
   mvim/trunk/src/org.vim.Components/BufferedVimControl/Controller/
   mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/
   mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/BufferedVimControl.cs
   mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs
   mvim/trunk/src/org.vim.Components/BufferedVimControl/View/
   mvim/trunk/src/org.vim.Components/VimBuffer/
   mvim/trunk/src/org.vim.Components/VimBuffer/Controller/
   mvim/trunk/src/org.vim.Components/VimBuffer/Model/
   mvim/trunk/src/org.vim.Components/VimBuffer/Model/IVimBuffer.cs
   mvim/trunk/src/org.vim.Components/VimBuffer/Model/VimBuffer.cs
   mvim/trunk/src/org.vim.Components/VimBuffer/View/
   mvim/trunk/src/org.vim.Components/VimBuffer/VimBufferMain.cs
   mvim/trunk/src/org.vim.Components/VimControl/
   mvim/trunk/src/org.vim.Components/VimControl/Controller/
   mvim/trunk/src/org.vim.Components/VimControl/Model/
   mvim/trunk/src/org.vim.Components/VimControl/Model/IVimControl.cs
   mvim/trunk/src/org.vim.Components/VimControl/View/
   mvim/trunk/src/org.vim.Components/VimControl/VimControlMain.cs
   mvim/trunk/src/org.vim.Components/VimEntry/
   mvim/trunk/src/org.vim.Components/VimEntry/Controller/
   mvim/trunk/src/org.vim.Components/VimEntry/Controller/IVimEntryController.cs
   mvim/trunk/src/org.vim.Components/VimEntry/Controller/VimEntryController.cs
   mvim/trunk/src/org.vim.Components/VimEntry/Model/
   mvim/trunk/src/org.vim.Components/VimEntry/Model/IVimEntryHandler.cs
   mvim/trunk/src/org.vim.Components/VimEntry/Model/VimEntryHandler.cs
   mvim/trunk/src/org.vim.Components/VimEntry/View/
   mvim/trunk/src/org.vim.Components/VimEntry/View/IVimEntryView.cs
   mvim/trunk/src/org.vim.Components/VimEntry/View/VimEntryView.cs
   mvim/trunk/src/org.vim.Components/VimEntry/VimEntryMain.cs
   mvim/trunk/src/org.vim.Components/VimFactory.cs
   mvim/trunk/src/resources/
   mvim/trunk/src/resources/log4net.config
Log:
Added MonoVim :D


Added: mvim/trunk/AUTHORS
===================================================================
--- mvim/trunk/AUTHORS	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/AUTHORS	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1 @@
+N?stor Salceda Alonso <wizito at gentelibre.org>

Added: mvim/trunk/COPYING
===================================================================
--- mvim/trunk/COPYING	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/COPYING	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,340 @@
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.
+     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Library General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+	    How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    MonoVim is a small editor created with Mono.
+    Copyright (C) 2005  N?stor Salceda Alonso
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) 2005 N?stor Salceda Alonso
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Library General
+Public License instead of this License.

Added: mvim/trunk/ChangeLog
===================================================================
--- mvim/trunk/ChangeLog	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/ChangeLog	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,2 @@
+**Nestor Salceda
+    Initial Version.

Added: mvim/trunk/INSTALL
===================================================================
--- mvim/trunk/INSTALL	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/INSTALL	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1 @@
+Installing MVim

Added: mvim/trunk/Makefile.am
===================================================================
--- mvim/trunk/Makefile.am	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/Makefile.am	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1 @@
+SUBDIRS = src doc

Added: mvim/trunk/NEWS
===================================================================
--- mvim/trunk/NEWS	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/NEWS	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1 @@
+News from MonoVim

Added: mvim/trunk/README
===================================================================
--- mvim/trunk/README	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/README	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1 @@
+Welcome to MonoVim Editor.

Added: mvim/trunk/autogen.sh
===================================================================
--- mvim/trunk/autogen.sh	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/autogen.sh	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,4 @@
+automake -a
+aclocal
+autoconf
+./configure $*


Property changes on: mvim/trunk/autogen.sh
___________________________________________________________________
Name: svn:executable
   + *

Added: mvim/trunk/configure.in
===================================================================
--- mvim/trunk/configure.in	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/configure.in	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,41 @@
+AC_INIT(README)
+AC_CANONICAL_SYSTEM
+AM_INIT_AUTOMAKE(MonoVim,0.2)
+AM_MAINTAINER_MODE
+
+AC_PROG_INSTALL
+
+dnl pkg-config
+AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
+if test "x$PKG_CONFIG" = "xno"; then
+	AC_MSG_ERROR([You need to install pkg-config])
+fi
+
+dnl C# compiler
+AC_PATH_PROG(CSC, csc, no)
+AC_PATH_PROG(MCS, mcs, no)
+CS="C#"
+if test "x$CSC" = "xno" -a "x$MCS" = "xno"  ; then
+	dnl AC_MSG_ERROR([You need to install a C# compiler])
+	AC_MSG_ERROR([No $CS compiler found])
+fi
+
+if test "x$MCS" = "xno" ; then
+	MCS=$CSC
+fi
+
+dnl gtk-sharp
+GTKSHARP_REQUIRED_VERSION=1.9.1
+PKG_CHECK_MODULES(GTKSHARP, gtk-sharp-2.0 >= $GTKSHARP_REQUIRED_VERSION)
+
+dnl gtksourceview-sharp
+GTKSOURCEVIEWSHARP_REQUIRED_VERSION=0.5
+PKG_CHECK_MODULES(GTKSOURCEVIEW, gtksourceview-sharp >= $GTKSOURCEVIEWSHARP_REQUIRED_VERSION)
+
+AC_SUBST(MCS)
+AC_OUTPUT([
+Makefile
+src/Makefile
+doc/Makefile
+src/AssemblyInfo.cs
+])

Added: mvim/trunk/doc/Makefile.am
===================================================================
--- mvim/trunk/doc/Makefile.am	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/doc/Makefile.am	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,8 @@
+all:
+	mono monodocer.exe --assembly:../src/MonoVim.exe --path:monodoc/
+	monodoc --assemble --ecma monodoc/ --out org.vim
+install:
+	cp org.vim.* `monodoc --get-sourcesdir`
+clean:
+	rm -fr monodoc/
+	rm org.vim.tree org.vim.zip

Added: mvim/trunk/doc/design/MonoVim.txt
===================================================================
--- mvim/trunk/doc/design/MonoVim.txt	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/doc/design/MonoVim.txt	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,72 @@
+MonoVim
+========
+
+Empezando por el principio, la breve historia de este peque?o proyecto.
+Encontramos problemas que no podiamos salvar a la hora de utilizar este editor;
+su dificil componentizaci?n fu? la principal motivaci?n a la hora de escribirlo.
+As? como tambi?n el poder utilizar comandos generados por nosotros.
+
+La primera versi?n, tenia algun error en el primer problema pero el a?adir alg?n
+nuevo comando invitaba a tener que entrar dentro del c?digo fuente de la
+aplicaci?n.
+
+Se decide un nuevo dise?o para hacer m?s facil estos dos problemas.
+
+======
+
+Notas:
+
+El nuevo dise?o:  Se especificar?n unos interfaces que deben cumplir los modelos
+de datos; separando as? las diferentes capas y cumpliendo el patr?n
+arquitect?nico MVC.
+
+Entonces, el corte de las clases ser? el siguiente:
+
+    Tendremos cada una de las unidades b?sicas de implementaci?n, los modelos de
+    datos, con sus casos de uso totalmente definidos.  Esto significa que por
+    ejemplo para crear el modelo Buffer, se deber? proveer unas cuantas
+    operaciones para manejar ese modelo de datos (Insertar nuevas lineas, borrar
+    caracteres ...)
+
+    Comunicaremos esto con la vista a trav?s de un Controlador, que capturar?
+    los eventos de la vista y los transformar? en llamadas a casos de uso del
+    modelo de datos que sea pertinente.
+
+    Y finalmente la vista, deber? contener los m?todos para poder actualizar el
+    estado del modelo.
+
+    **No existir?n referencias en la vista al Modelo de datos; s?lo una al
+    controlador, y en el controlador tendremos una hacia la vista y otra hacia
+    el controlador.
+
+Modelos de datos y casos de uso:
+================================
+
+    En muchos casos el modelo de datos ser? algo bastante parecido a un VO nada
+    m?s, con sus correspondientes m?todos getter y setter. Y los eventos que se
+    produzcan.
+    El buffer d?nde escribiremos llevar? unos cuantos casos de uso m?s.
+    Generalmente el manejo del texto que estemos escribiendo.
+    Adem?s constara de eventos variados (Observer) para notificar los cambios a
+    la vista y que esta act?e como el programador lo quiera.
+
+Vistas y Modelos:
+=================
+    A la hora de generar una vista, se le surrogar? un modelo de datos que tenga
+    sus eventos, para poder capturarlos y tomar las decisiones que se tenga en
+    cuenta.
+    Generalmente el Interface de cualquier vista, proveera m?todos para poder
+    capturar los eventos y manejarlos.
+
+?Qu? ganamos?
+=============
+    Independencia de modelos; es posible especificar un modelo utilizando la
+    implementaci?n que deseemos.
+    Independencia en la vista, no se depende de GTK y se puede generar una vista
+    para cualquier toolkit gr?fico.
+
+Construcci?n de los componentes.
+================================
+    Para construir el componente principal del Vim, lo vamos a dividir en varios
+    componentes que se combinar?n para crear el componente principal. 
+    

Added: mvim/trunk/doc/log4net.dll
===================================================================
--- mvim/trunk/doc/log4net.dll	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/doc/log4net.dll	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1 @@
+link ../src/lib/log4net.dll
\ No newline at end of file


Property changes on: mvim/trunk/doc/log4net.dll
___________________________________________________________________
Name: svn:special
   + *

Added: mvim/trunk/doc/monodocer.exe
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/doc/monodocer.exe
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Added: mvim/trunk/doc/org.vim.source
===================================================================
--- mvim/trunk/doc/org.vim.source	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/doc/org.vim.source	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,5 @@
+<?xml version='1.0'?>
+<monodoc>
+    <node label='MonoVim' name='org.vim'/>
+    <source basefile='org.vim' path='org.vim' provider='ecma'/>
+</monodoc>

Added: mvim/trunk/src/AssemblyInfo.cs.in
===================================================================
--- mvim/trunk/src/AssemblyInfo.cs.in	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/AssemblyInfo.cs.in	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,7 @@
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+[assembly: AssemblyVersion("@VERSION@")]
+[assembly: AssemblyTitle ("MonoVim")]
+[assembly: AssemblyDescription ("A little editor, as vim.  Using Mono & GTK#")]
+[assembly: AssemblyCopyright ("Copyright (c) 2005 N?stor Salceda Alonso")]

Added: mvim/trunk/src/Launcher.cs
===================================================================
--- mvim/trunk/src/Launcher.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/Launcher.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,33 @@
+using System;
+using org.vim.Components.VimEntry.Model;
+namespace org.vim.Main {
+    public class Launcher {
+/**
+        IView view;
+
+        public Launcher () {
+            view = new View ();
+        }
+     
+     	public Launcher (string fileUri) {
+            view = new View (fileUri);
+        }
+*/        
+        public static void Main (string[] args) {
+/*          Launcher launcher = null;
+            if (args.Length == 1) {
+                Application.Init ();
+                launcher = new Launcher (args[0]);
+            }
+            else {
+                Application.Init ();
+                launcher = new Launcher ();
+            }
+            Application.Run ();
+            Environment.Exit (0);
+*/
+//           IVimEntry vimEntry = new VimEntry ();
+//           vimEntry.Command = "EjecutaEsto";
+        }
+    }
+}

Added: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/Makefile.am	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,48 @@
+PKG_REFERENCES=\
+gtk-sharp-2.0 \
+gtksourceview-sharp \
+rsvg-sharp-2.0
+
+PKG_REFERENCES_BUILD=$(addprefix -pkg:,$(PKG_REFERENCES))
+
+LIB_REFERENCES = lib/log4net.dll 
+
+LIB_REFERENCES_BUILD=$(addprefix -reference:,$(LIB_REFERENCES))
+
+RESOURCES_REFERENCES= \
+resources/log4net.config
+
+RESOURCES_REFERENCES_BUILD=$(foreach res, $(RESOURCES_REFERENCES),$(addprefix -resource:,$(res)),$(notdir $(res)))
+
+SOURCES_REFERENCES=\
+org.vim.Components/BufferedVimControl/Model/*.cs\
+org.vim.Components/BufferedVimControl/Controller/*.cs\
+org.vim.Components/BufferedVimControl/View/*.cs\
+org.vim.Components/BufferedVimControl/*.cs\
+org.vim.Components/VimControl/Model/*.cs\
+org.vim.Components/VimControl/Controller/*.cs\
+org.vim.Components/VimControl/View/*.cs\
+org.vim.Components/VimControl/*.cs\
+org.vim.Components/VimBuffer/Model/*.cs\
+org.vim.Components/VimBuffer/Controller/*.cs\
+org.vim.Components/VimBuffer/View/*.cs\
+org.vim.Components/VimBuffer/*.cs\
+org.vim.Components/VimEntry/Model/*.cs\
+org.vim.Components/VimEntry/Controller/*.cs\
+org.vim.Components/VimEntry/View/*.cs\
+org.vim.Components/VimEntry/*.cs\
+org.vim.Components/*.cs\
+Launcher.cs \
+AssemblyInfo.cs
+
+SOURCES_REFERENCES_BUILD=$(addprefix $(srcdir)/, $(SOURCES_REFERENCES))
+
+all:
+	$(MCS) $(PKG_REFERENCES_BUILD) $(LIB_REFERENCES_BUILD) $(RESOURCES_REFERENCES_BUILD) $(SOURCES_REFERENCES) -o MonoVim.exe
+
+install:
+	cp MonoVim.exe /usr/local/bin
+	cp monovim /usr/local/bin
+clean:
+	rm MonoVim.exe
+	rm AssemblyInfo.cs

Added: mvim/trunk/src/MonoVim.exe.config
===================================================================
--- mvim/trunk/src/MonoVim.exe.config	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/MonoVim.exe.config	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+	<configSections>
+		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
+	</configSections>
+	<log4net>
+		<appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender" >
+			<layout type="log4net.Layout.PatternLayout">
+				<param name="ConversionPattern" value="%d %-5p %c - %m%n" />
+			</layout>
+		</appender>
+		<root>
+			<level value="DEBUG" />
+			<appender-ref ref="ConsoleAppender" />
+		</root>
+	</log4net>
+</configuration>

Added: mvim/trunk/src/lib/log4net.dll
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/src/lib/log4net.dll
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: mvim/trunk/src/log4net.dll
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/src/log4net.dll
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: mvim/trunk/src/monovim
===================================================================
--- mvim/trunk/src/monovim	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/monovim	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+mono /usr/local/bin/MonoVim.exe $*


Property changes on: mvim/trunk/src/monovim
___________________________________________________________________
Name: svn:executable
   + *

Added: mvim/trunk/src/org.vim.Components/BufferedVimControl/BufferedVimMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/BufferedVimControl/BufferedVimMain.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/BufferedVimControl/BufferedVimMain.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,5 @@
+
+namespace org.vim.Components.BufferedVimControl {
+    public class BufferedVimMain {
+    }
+}

Added: mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/BufferedVimControl.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/BufferedVimControl.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/BufferedVimControl.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,61 @@
+/**using org.vim.Components.VimControl.Model;
+using System.Collections;
+using log4net;
+using log4net.Config;
+
+namespace org.vim.Components.BufferedVimControl.Model {
+    public class BufferedVimControl : IBufferedVimControl {
+        IList controlList;
+        ILog log;
+        
+        public BufferedVimControl () {
+            log = LogManager.GetLogger (this.GetType ());
+            DOMConfigurator.Configure ();
+            
+            controlList = new ArrayList ();
+            
+            log.Debug ("Init new BufferedVimControl");
+        }
+        
+        //INherited methods.
+        public IList ControlList {
+            get {return controlList;}
+            set {controlList = value;}
+        }
+        
+        public IVimControl this [int index] {
+            get {
+                return (IVimControl)controlList[index];
+            }
+        }
+        
+        public int Count {
+            get {
+                return controlList.Count;
+            }
+        }
+
+        public int Active {
+            get {
+                return 0;
+            }
+        }
+
+        public IVimControl NextControl () {
+            return null;
+        }
+
+        public IVimControl PreviousControl () {
+            return null;
+        }
+
+        public void Append(IVimControl vimControl) {
+            log.Debug ("Appending a new VimControl.");
+        }
+        
+        public void Delete (IVimControl vimControl) {
+            log.Debug ("Deleting an existent VimControl");
+        }
+    }
+}
+*/

Added: mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,79 @@
+/*using System.Collections;
+using org.vim.Components.VimControl.Model;
+
+namespace org.vim.Components.BufferedVimControl.Model {
+    //
+    //<summary
+    //  This interface represents the main component in the Application.
+    //  It's a top level component. It manage the list of pairs of editor &
+    //  command line.  And with it, we can manage the buffers, and access to a
+    //  content of each buffer.
+    //
+    //  The implementation reference is written with GTK#, but the main idea is
+    //  use other data structures in order to decouple the application and, for
+    //  example; write easily the component with QT#, only implementing this
+    //  interface.
+    //  
+    //  This is thinked by Extensibility.
+    //</summary>
+    //
+    public interface IBufferedVimControl {
+        
+        //
+        //<summary>
+        // This is a List of Buffers.
+        //</summary>
+        //
+        IList ControlList {get; set;}
+        
+        //
+        //<summary>
+        // Accessor for each IVimControl component.
+        //</summary>
+        //
+        IVimControl this [int index] {get;}
+
+        //
+        //<summary>
+        //Returns number of Buffers that this component contains.
+        //</summary>
+        //
+        int Count {get;}
+    
+        //
+        //<summary>
+        //Returns active control.
+        //</summary>
+        //
+        int Active {get;}
+            
+        //
+        //<summary>
+        //Goes to next VimControl.
+        //</summary>
+        //
+        IVimControl NextControl ();
+
+        //
+        //<summary>
+        //Goes to previous VimControl
+        //</summary>
+        //
+        IVimControl PreviousControl ();
+       
+        //
+        //<summary>
+        //Appends a Control.
+        //</summary>
+        //
+        void Append (IVimControl vimControl);
+
+        //
+        //<summary>
+        //Delete a Control.
+        //</summary>
+        //
+        void Delete (IVimControl vimControl);
+    }
+}
+*/

Added: mvim/trunk/src/org.vim.Components/VimBuffer/Model/IVimBuffer.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimBuffer/Model/IVimBuffer.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimBuffer/Model/IVimBuffer.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,5 @@
+namespace org.vim.Components.VimBuffer.Model {
+    public interface IVimBuffer {
+        string Text {get; set;}
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimBuffer/Model/VimBuffer.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimBuffer/Model/VimBuffer.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimBuffer/Model/VimBuffer.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,11 @@
+namespace org.vim.Components.VimBuffer.Model {
+
+    public class VimBuffer : IVimBuffer {
+        private string text;
+
+        public string Text {
+            get {return text;}
+            set {text = value;}
+        }
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimBuffer/VimBufferMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimBuffer/VimBufferMain.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimBuffer/VimBufferMain.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,4 @@
+namespace org.vim.Components.VimBuffer {
+    public class VimBufferMain {
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimControl/Model/IVimControl.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimControl/Model/IVimControl.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimControl/Model/IVimControl.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,84 @@
+/**using System;
+using org.vim.Components.VimBuffer.Model;
+using org.vim.Components.VimEntry.Model;
+
+namespace org.vim.Components.VimControl.Model {
+
+    //
+    //<summary>
+    //  Handler for ChangeMode event.
+    //</summary>
+    //
+    public delegate void ChangeModeHandler (IVimControl sender);
+    
+    //
+    //<summary>
+    //  This enum, represent states which Control could be.  Command and
+    //  edition, probabily we add another state more.
+    //</summary>
+    //
+    public enum Mode {
+        Command,
+        Edition
+    }
+    
+    //
+    //<summary>
+    //  This interface represents a VimControl; it's constructed by a union of
+    //  the TextView component, and the Entry component.  The entry, will be act
+    //  as command line, and textView manage the model to edit.
+    //</summary>
+    //
+    public interface IVimControl {
+        //
+        //<summary>
+        //      This event represents when the mode is Changed.
+        //</summary>
+        //
+        event ChangeModeHandler ChangeMode;
+       
+        //
+        //<summary>
+        //      Control also get information for the file which will be edited.
+        //</summary>
+        //
+        string FileUri {get; set;}
+
+        //
+        //<summary>
+        //      State of this control.
+        //</summary
+        //
+        Mode Mode {get; set;}
+
+        //
+        //<summary>
+        //      Accessor to the IVimTextView.
+        //</summary>
+        //
+        IVimBuffer VimBuffer {get; set;}
+
+
+        //
+        //<summary>
+        //      Accessor to little command line.
+        //</summary>
+        //
+        IVimEntry VimEntry {get; set;}
+        
+        //
+        //<summary>
+        //      Method to Change to command mode.
+        //</summary>
+        //
+        void ChangeToCommand ();
+        
+        //
+        //<summary>
+        //      Method to Change to edition mode.
+        //</summary>
+        //
+        void ChangeToEdition ();
+    }
+}
+*/

Added: mvim/trunk/src/org.vim.Components/VimControl/VimControlMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimControl/VimControlMain.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimControl/VimControlMain.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,4 @@
+namespace org.vim.Components.VimControl {
+    public class VimControlMain {
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimEntry/Controller/IVimEntryController.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Controller/IVimEntryController.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimEntry/Controller/IVimEntryController.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,6 @@
+
+namespace org.vim.Components.VimEntry.Controller {
+    public interface IVimEntryController {
+        void Execute (string text);
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimEntry/Controller/VimEntryController.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Controller/VimEntryController.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimEntry/Controller/VimEntryController.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,19 @@
+using org.vim.Components.VimEntry.Model;
+using org.vim.Components.VimEntry.View;
+
+namespace org.vim.Components.VimEntry.Controller {
+    public class VimEntryController : IVimEntryController {
+        
+        private IVimEntryHandler vimEntryHandler;
+        private IVimEntryView vimEntryView;
+            
+        public VimEntryController (IVimEntryHandler vimEntryHandler, IVimEntryView vimEntryView) {
+            this.vimEntryHandler = vimEntryHandler;
+            this.vimEntryView = vimEntryView;
+        }
+
+        public void Execute (string text) {
+            vimEntryHandler.Command = text; 
+        }
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimEntry/Model/IVimEntryHandler.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Model/IVimEntryHandler.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimEntry/Model/IVimEntryHandler.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,8 @@
+namespace org.vim.Components.VimEntry.Model {
+//    public delegate void CommandActivatedHandler (IVimEntryHandler sender);
+    public interface IVimEntryHandler {
+//        event CommandActivatedHandler CommandActivate; 
+        string Command {get; set;}
+       
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimEntry/Model/VimEntryHandler.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Model/VimEntryHandler.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimEntry/Model/VimEntryHandler.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,36 @@
+using System;
+using log4net;
+using log4net.Config;
+
+namespace org.vim.Components.VimEntry.Model {
+    public class VimEntryHandler : IVimEntryHandler {
+        
+        private string command;
+//        public event CommandActivatedHandler CommandActivate; 
+        
+        //Logging Utility
+        private ILog log;
+        
+        public VimEntryHandler () {
+            DOMConfigurator.Configure ();
+            log = LogManager.GetLogger (this.GetType ());
+            command = String.Empty;
+            log.Debug ("Init a new VimEntry.");
+        }
+        
+        public string Command {
+            get {return command;}
+            set {
+                command = value;
+        //        NotifyCommandActivate ();
+            }
+        }
+    
+/**     private void NotifyCommandActivate () {
+           if (CommandActivate != null)
+            this.CommandActivate (this);
+            log.Debug ("Notifing that command has been Activated.");
+        }
+*/
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimEntry/View/IVimEntryView.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/View/IVimEntryView.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimEntry/View/IVimEntryView.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,5 @@
+namespace org.vim.Components.VimEntry.View {
+    public interface IVimEntryView {
+
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimEntry/View/VimEntryView.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/View/VimEntryView.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimEntry/View/VimEntryView.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,18 @@
+using org.vim.Components.VimEntry.Model;
+using Gtk;
+
+
+namespace org.vim.Components.VimEntry.View {
+    public class VimEntryView : Gtk.Entry, IVimEntryView {
+        IVimEntryHandler vimEntryHandler;
+        //IVimEntryController vimEntryController;
+
+        public VimEntryView () {
+            vimEntryHandler = new VimEntryHandler ();
+        }
+
+        protected override void OnActivated () {
+               base.OnActivated ();
+        }
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimEntry/VimEntryMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/VimEntryMain.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimEntry/VimEntryMain.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,4 @@
+namespace org.vim.Components.VimEntry {
+    public class VimEntryMain {
+    }
+}

Added: mvim/trunk/src/org.vim.Components/VimFactory.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimFactory.cs	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/org.vim.Components/VimFactory.cs	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,20 @@
+using log4net;
+using log4net.Config;
+
+namespace org.vim.Components {
+    public class VimFactory {
+        private static VimFactory vimFactory;
+        
+        private VimFactory () {
+        
+        }
+
+        public static VimFactory Instance {
+            get {
+                if (vimFactory == null)
+                    vimFactory = new VimFactory ();
+                return vimFactory;
+            }
+        }
+    }
+}

Added: mvim/trunk/src/resources/log4net.config
===================================================================
--- mvim/trunk/src/resources/log4net.config	2005-02-14 01:05:22 UTC (rev 316)
+++ mvim/trunk/src/resources/log4net.config	2005-02-14 08:59:27 UTC (rev 317)
@@ -0,0 +1,16 @@
+<log4net>
+	<!-- A1 is set to be a ConsoleAppender -->
+	<appender name="A1" type="log4net.Appender.ConsoleAppender">
+
+		<!-- A1 uses PatternLayout -->
+		<layout type="log4net.Layout.PatternLayout">
+			<conversionPattern value="%5d [%p]%c(%F:%L) %x - %m%n" />
+		</layout>
+	</appender>
+	
+	<!-- Set root logger level to DEBUG and its only appender to A1 -->
+	<root>
+		<level value="DEBUG" />
+		<appender-ref ref="A1" />
+	</root>
+</log4net>



From nestor at sheep.berlios.de  Mon Feb 14 10:00:35 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 10:00:35 +0100
Subject: [Mspace-checkins] r318 - in mvim/trunk/doc: . monodoc monodoc/org.vim.Components monodoc/org.vim.Components.BufferedVimControl monodoc/org.vim.Components.VimBuffer monodoc/org.vim.Components.VimBuffer.Model monodoc/org.vim.Components.VimControl monodoc/org.vim.Components.VimEntry monodoc/org.vim.Components.VimEntry.Controller monodoc/org.vim.Components.VimEntry.Model monodoc/org.vim.Components.VimEntry.View monodoc/org.vim.Main
Message-ID: <200502140900.j1E90ZZ4003987@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 10:00:34 +0100 (Mon, 14 Feb 2005)
New Revision: 318

Added:
   mvim/trunk/doc/monodoc/
   mvim/trunk/doc/monodoc/index.xml
   mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl.xml
   mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl/
   mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl/BufferedVimMain.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/IVimBuffer.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/VimBuffer.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer/
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer/VimBufferMain.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimControl.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimControl/
   mvim/trunk/doc/monodoc/org.vim.Components.VimControl/VimControlMain.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/IVimEntryController.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/VimEntryController.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/IVimEntryHandler.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/VimEntryHandler.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/IVimEntryView.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/VimEntryView.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.xml
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry/VimEntryMain.xml
   mvim/trunk/doc/monodoc/org.vim.Components.xml
   mvim/trunk/doc/monodoc/org.vim.Components/
   mvim/trunk/doc/monodoc/org.vim.Components/VimFactory.xml
   mvim/trunk/doc/monodoc/org.vim.Main.xml
   mvim/trunk/doc/monodoc/org.vim.Main/
   mvim/trunk/doc/monodoc/org.vim.Main/Launcher.xml
Log:
Added Documentation.


Added: mvim/trunk/doc/monodoc/index.xml
===================================================================
--- mvim/trunk/doc/monodoc/index.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/index.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,52 @@
+<Overview>
+  <Assembly Version="0.2.0.0">MonoVim</Assembly>
+  <Remarks>To be added.</Remarks>
+  <Copyright>To be added.</Copyright>
+  <Types>
+    <Namespace Name="org.vim.Components.VimBuffer.Model">
+      <Type Name="IVimBuffer" />
+      <Type Name="VimBuffer" />
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry.Model">
+      <Type Name="IVimEntryHandler" />
+      <Type Name="VimEntryHandler" />
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry.Controller">
+      <Type Name="IVimEntryController" />
+      <Type Name="VimEntryController" />
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry.View">
+      <Type Name="IVimEntryView" />
+      <Type Name="VimEntryView" />
+    </Namespace>
+    <Namespace Name="org.vim.Components.BufferedVimControl">
+      <Type Name="BufferedVimMain" />
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimControl">
+      <Type Name="VimControlMain" />
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimBuffer">
+      <Type Name="VimBufferMain" />
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry">
+      <Type Name="VimEntryMain" />
+    </Namespace>
+    <Namespace Name="org.vim.Components">
+      <Type Name="VimFactory" />
+    </Namespace>
+    <Namespace Name="org.vim.Main">
+      <Type Name="Launcher" />
+    </Namespace>
+  </Types>
+  <Attributes>
+    <Attribute>
+      <AttributeName>System.Reflection.AssemblyCopyright(Copyright="Copyright (c) 2005 N??stor Salceda Alonso")</AttributeName>
+    </Attribute>
+    <Attribute>
+      <AttributeName>System.Reflection.AssemblyDescription(Description="A little editor, as vim.  Using Mono &amp; GTK#")</AttributeName>
+    </Attribute>
+    <Attribute>
+      <AttributeName>System.Reflection.AssemblyTitle(Title="MonoVim")</AttributeName>
+    </Attribute>
+  </Attributes>
+</Overview>

Added: mvim/trunk/doc/monodoc/org.vim.Components/VimFactory.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components/VimFactory.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components/VimFactory.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,29 @@
+<Type Name="VimFactory" FullName="org.vim.Components.VimFactory">
+  <TypeSignature Language="C#" Value="public class VimFactory" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName="Instance">
+      <MemberSignature Language="C#" Value="public static org.vim.Components.VimFactory Instance { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>org.vim.Components.VimFactory</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl/BufferedVimMain.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl/BufferedVimMain.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl/BufferedVimMain.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,26 @@
+<Type Name="BufferedVimMain" FullName="org.vim.Components.BufferedVimControl.BufferedVimMain">
+  <TypeSignature Language="C#" Value="public class BufferedVimMain" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public BufferedVimMain ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.BufferedVimControl">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer/VimBufferMain.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer/VimBufferMain.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer/VimBufferMain.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,26 @@
+<Type Name="VimBufferMain" FullName="org.vim.Components.VimBuffer.VimBufferMain">
+  <TypeSignature Language="C#" Value="public class VimBufferMain" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public VimBufferMain ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/IVimBuffer.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/IVimBuffer.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/IVimBuffer.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,26 @@
+<Type Name="IVimBuffer" FullName="org.vim.Components.VimBuffer.Model.IVimBuffer">
+  <TypeSignature Language="C#" Value="public interface IVimBuffer" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Interfaces />
+  <Members>
+    <Member MemberName="Text">
+      <MemberSignature Language="C#" Value="public string Text { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/VimBuffer.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/VimBuffer.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/VimBuffer.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,42 @@
+<Type Name="VimBuffer" FullName="org.vim.Components.VimBuffer.Model.VimBuffer">
+  <TypeSignature Language="C#" Value="public class VimBuffer : org.vim.Components.VimBuffer.Model.IVimBuffer" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>org.vim.Components.VimBuffer.Model.IVimBuffer</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public VimBuffer ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Text">
+      <MemberSignature Language="C#" Value="public string Text { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.VimBuffer.Model">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.VimBuffer">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimControl/VimControlMain.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimControl/VimControlMain.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimControl/VimControlMain.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,26 @@
+<Type Name="VimControlMain" FullName="org.vim.Components.VimControl.VimControlMain">
+  <TypeSignature Language="C#" Value="public class VimControlMain" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public VimControlMain ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimControl.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimControl.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimControl.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.VimControl">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry/VimEntryMain.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry/VimEntryMain.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry/VimEntryMain.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,26 @@
+<Type Name="VimEntryMain" FullName="org.vim.Components.VimEntry.VimEntryMain">
+  <TypeSignature Language="C#" Value="public class VimEntryMain" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public VimEntryMain ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/IVimEntryController.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/IVimEntryController.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/IVimEntryController.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,29 @@
+<Type Name="IVimEntryController" FullName="org.vim.Components.VimEntry.Controller.IVimEntryController">
+  <TypeSignature Language="C#" Value="public interface IVimEntryController" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Interfaces />
+  <Members>
+    <Member MemberName="Execute">
+      <MemberSignature Language="C#" Value="public void Execute (string text);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="text" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="text">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/VimEntryController.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/VimEntryController.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/VimEntryController.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,50 @@
+<Type Name="VimEntryController" FullName="org.vim.Components.VimEntry.Controller.VimEntryController">
+  <TypeSignature Language="C#" Value="public class VimEntryController : org.vim.Components.VimEntry.Controller.IVimEntryController" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>org.vim.Components.VimEntry.Controller.IVimEntryController</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public VimEntryController (org.vim.Components.VimEntry.Model.IVimEntryHandler vimEntryHandler, org.vim.Components.VimEntry.View.IVimEntryView vimEntryView);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="vimEntryHandler" Type="org.vim.Components.VimEntry.Model.IVimEntryHandler" />
+        <Parameter Name="vimEntryView" Type="org.vim.Components.VimEntry.View.IVimEntryView" />
+      </Parameters>
+      <Docs>
+        <param name="vimEntryHandler">To be added.</param>
+        <param name="vimEntryView">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Execute">
+      <MemberSignature Language="C#" Value="public void Execute (string text);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="text" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="text">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.VimEntry.Controller">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/IVimEntryHandler.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/IVimEntryHandler.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/IVimEntryHandler.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,26 @@
+<Type Name="IVimEntryHandler" FullName="org.vim.Components.VimEntry.Model.IVimEntryHandler">
+  <TypeSignature Language="C#" Value="public interface IVimEntryHandler" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Interfaces />
+  <Members>
+    <Member MemberName="Command">
+      <MemberSignature Language="C#" Value="public string Command { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/VimEntryHandler.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/VimEntryHandler.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/VimEntryHandler.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,42 @@
+<Type Name="VimEntryHandler" FullName="org.vim.Components.VimEntry.Model.VimEntryHandler">
+  <TypeSignature Language="C#" Value="public class VimEntryHandler : org.vim.Components.VimEntry.Model.IVimEntryHandler" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>org.vim.Components.VimEntry.Model.IVimEntryHandler</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public VimEntryHandler ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Command">
+      <MemberSignature Language="C#" Value="public string Command { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.VimEntry.Model">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/IVimEntryView.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/IVimEntryView.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/IVimEntryView.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,13 @@
+<Type Name="IVimEntryView" FullName="org.vim.Components.VimEntry.View.IVimEntryView">
+  <TypeSignature Language="C#" Value="public interface IVimEntryView" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Interfaces />
+  <Members />
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/VimEntryView.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/VimEntryView.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/VimEntryView.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,30 @@
+<Type Name="VimEntryView" FullName="org.vim.Components.VimEntry.View.VimEntryView">
+  <TypeSignature Language="C#" Value="public class VimEntryView : Gtk.Entry, org.vim.Components.VimEntry.View.IVimEntryView" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>Gtk.Entry</BaseTypeName>
+  </Base>
+  <Interfaces>
+    <Interface>
+      <InterfaceName>org.vim.Components.VimEntry.View.IVimEntryView</InterfaceName>
+    </Interface>
+  </Interfaces>
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public VimEntryView ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.VimEntry.View">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components.VimEntry">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Components.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Components.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Components.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Components">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>

Added: mvim/trunk/doc/monodoc/org.vim.Main/Launcher.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Main/Launcher.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Main/Launcher.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,41 @@
+<Type Name="Launcher" FullName="org.vim.Main.Launcher">
+  <TypeSignature Language="C#" Value="public class Launcher" />
+  <AssemblyInfo>
+    <AssemblyName>MonoVim</AssemblyName>
+    <AssemblyVersion>0.2.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Object</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Launcher ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Main">
+      <MemberSignature Language="C#" Value="public static void Main (string[] args);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="args" Type="System.String[]" />
+      </Parameters>
+      <Docs>
+        <param name="args">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Type>

Added: mvim/trunk/doc/monodoc/org.vim.Main.xml
===================================================================
--- mvim/trunk/doc/monodoc/org.vim.Main.xml	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/doc/monodoc/org.vim.Main.xml	2005-02-14 09:00:34 UTC (rev 318)
@@ -0,0 +1,6 @@
+<Namespace Name="org.vim.Main">
+  <Docs>
+    <summary>To be added.</summary>
+    <remarks>To be added.</remarks>
+  </Docs>
+</Namespace>



From nestor at sheep.berlios.de  Mon Feb 14 11:31:02 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 11:31:02 +0100
Subject: [Mspace-checkins] r319 - in mvim/trunk: doc/monodoc src src/Vim.Components src/Vim.Components/BufferedVimControl src/Vim.Components/BufferedVimControl/Model src/Vim.Components/VimBuffer src/Vim.Components/VimBuffer/Model src/Vim.Components/VimControl src/Vim.Components/VimControl/Model src/Vim.Components/VimEntry src/Vim.Components/VimEntry/Controller src/Vim.Components/VimEntry/Model src/Vim.Components/VimEntry/View src/Vim.Main
Message-ID: <200502141031.j1EAV2jk009807@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 11:30:46 +0100 (Mon, 14 Feb 2005)
New Revision: 319

Added:
   mvim/trunk/src/Vim.Components/
   mvim/trunk/src/Vim.Main/
   mvim/trunk/src/Vim.Main/Launcher.cs
Removed:
   mvim/trunk/src/Launcher.cs
   mvim/trunk/src/org.vim.Components/
Modified:
   mvim/trunk/doc/monodoc/index.xml
   mvim/trunk/src/Makefile.am
   mvim/trunk/src/Vim.Components/BufferedVimControl/BufferedVimMain.cs
   mvim/trunk/src/Vim.Components/BufferedVimControl/Model/BufferedVimControl.cs
   mvim/trunk/src/Vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs
   mvim/trunk/src/Vim.Components/VimBuffer/Model/IVimBuffer.cs
   mvim/trunk/src/Vim.Components/VimBuffer/Model/VimBuffer.cs
   mvim/trunk/src/Vim.Components/VimBuffer/VimBufferMain.cs
   mvim/trunk/src/Vim.Components/VimControl/Model/IVimControl.cs
   mvim/trunk/src/Vim.Components/VimControl/VimControlMain.cs
   mvim/trunk/src/Vim.Components/VimEntry/Controller/IVimEntryController.cs
   mvim/trunk/src/Vim.Components/VimEntry/Controller/VimEntryController.cs
   mvim/trunk/src/Vim.Components/VimEntry/Model/IVimEntryHandler.cs
   mvim/trunk/src/Vim.Components/VimEntry/Model/VimEntryHandler.cs
   mvim/trunk/src/Vim.Components/VimEntry/View/IVimEntryView.cs
   mvim/trunk/src/Vim.Components/VimEntry/View/VimEntryView.cs
   mvim/trunk/src/Vim.Components/VimEntry/VimEntryMain.cs
   mvim/trunk/src/Vim.Components/VimFactory.cs
Log:
Move to Vim.Components


Modified: mvim/trunk/doc/monodoc/index.xml
===================================================================
--- mvim/trunk/doc/monodoc/index.xml	2005-02-14 09:00:34 UTC (rev 318)
+++ mvim/trunk/doc/monodoc/index.xml	2005-02-14 10:30:46 UTC (rev 319)
@@ -4,37 +4,57 @@
   <Copyright>To be added.</Copyright>
   <Types>
     <Namespace Name="org.vim.Components.VimBuffer.Model">
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry.Model">
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry.Controller">
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry.View">
+    </Namespace>
+    <Namespace Name="org.vim.Components.BufferedVimControl">
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimControl">
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimBuffer">
+    </Namespace>
+    <Namespace Name="org.vim.Components.VimEntry">
+    </Namespace>
+    <Namespace Name="org.vim.Components">
+    </Namespace>
+    <Namespace Name="org.vim.Main">
+    </Namespace>
+    <Namespace Name="Vim.Components.VimBuffer.Model">
       <Type Name="IVimBuffer" />
       <Type Name="VimBuffer" />
     </Namespace>
-    <Namespace Name="org.vim.Components.VimEntry.Model">
+    <Namespace Name="Vim.Components.VimEntry.Model">
       <Type Name="IVimEntryHandler" />
       <Type Name="VimEntryHandler" />
     </Namespace>
-    <Namespace Name="org.vim.Components.VimEntry.Controller">
+    <Namespace Name="Vim.Components.VimEntry.Controller">
       <Type Name="IVimEntryController" />
       <Type Name="VimEntryController" />
     </Namespace>
-    <Namespace Name="org.vim.Components.VimEntry.View">
+    <Namespace Name="Vim.Components.VimEntry.View">
       <Type Name="IVimEntryView" />
       <Type Name="VimEntryView" />
     </Namespace>
-    <Namespace Name="org.vim.Components.BufferedVimControl">
+    <Namespace Name="Vim.Components.BufferedVimControl">
       <Type Name="BufferedVimMain" />
     </Namespace>
-    <Namespace Name="org.vim.Components.VimControl">
+    <Namespace Name="Vim.Components.VimControl">
       <Type Name="VimControlMain" />
     </Namespace>
-    <Namespace Name="org.vim.Components.VimBuffer">
+    <Namespace Name="Vim.Components.VimBuffer">
       <Type Name="VimBufferMain" />
     </Namespace>
-    <Namespace Name="org.vim.Components.VimEntry">
+    <Namespace Name="Vim.Components.VimEntry">
       <Type Name="VimEntryMain" />
     </Namespace>
-    <Namespace Name="org.vim.Components">
+    <Namespace Name="Vim.Components">
       <Type Name="VimFactory" />
     </Namespace>
-    <Namespace Name="org.vim.Main">
+    <Namespace Name="Vim.Main">
       <Type Name="Launcher" />
     </Namespace>
   </Types>

Deleted: mvim/trunk/src/Launcher.cs
===================================================================
--- mvim/trunk/src/Launcher.cs	2005-02-14 09:00:34 UTC (rev 318)
+++ mvim/trunk/src/Launcher.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,33 +0,0 @@
-using System;
-using org.vim.Components.VimEntry.Model;
-namespace org.vim.Main {
-    public class Launcher {
-/**
-        IView view;
-
-        public Launcher () {
-            view = new View ();
-        }
-     
-     	public Launcher (string fileUri) {
-            view = new View (fileUri);
-        }
-*/        
-        public static void Main (string[] args) {
-/*          Launcher launcher = null;
-            if (args.Length == 1) {
-                Application.Init ();
-                launcher = new Launcher (args[0]);
-            }
-            else {
-                Application.Init ();
-                launcher = new Launcher ();
-            }
-            Application.Run ();
-            Environment.Exit (0);
-*/
-//           IVimEntry vimEntry = new VimEntry ();
-//           vimEntry.Command = "EjecutaEsto";
-        }
-    }
-}

Modified: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-14 09:00:34 UTC (rev 318)
+++ mvim/trunk/src/Makefile.am	2005-02-14 10:30:46 UTC (rev 319)
@@ -15,24 +15,24 @@
 RESOURCES_REFERENCES_BUILD=$(foreach res, $(RESOURCES_REFERENCES),$(addprefix -resource:,$(res)),$(notdir $(res)))
 
 SOURCES_REFERENCES=\
-org.vim.Components/BufferedVimControl/Model/*.cs\
-org.vim.Components/BufferedVimControl/Controller/*.cs\
-org.vim.Components/BufferedVimControl/View/*.cs\
-org.vim.Components/BufferedVimControl/*.cs\
-org.vim.Components/VimControl/Model/*.cs\
-org.vim.Components/VimControl/Controller/*.cs\
-org.vim.Components/VimControl/View/*.cs\
-org.vim.Components/VimControl/*.cs\
-org.vim.Components/VimBuffer/Model/*.cs\
-org.vim.Components/VimBuffer/Controller/*.cs\
-org.vim.Components/VimBuffer/View/*.cs\
-org.vim.Components/VimBuffer/*.cs\
-org.vim.Components/VimEntry/Model/*.cs\
-org.vim.Components/VimEntry/Controller/*.cs\
-org.vim.Components/VimEntry/View/*.cs\
-org.vim.Components/VimEntry/*.cs\
-org.vim.Components/*.cs\
-Launcher.cs \
+Vim.Components/BufferedVimControl/Model/*.cs\
+Vim.Components/BufferedVimControl/Controller/*.cs\
+Vim.Components/BufferedVimControl/View/*.cs\
+Vim.Components/BufferedVimControl/*.cs\
+Vim.Components/VimControl/Model/*.cs\
+Vim.Components/VimControl/Controller/*.cs\
+Vim.Components/VimControl/View/*.cs\
+Vim.Components/VimControl/*.cs\
+Vim.Components/VimBuffer/Model/*.cs\
+Vim.Components/VimBuffer/Controller/*.cs\
+Vim.Components/VimBuffer/View/*.cs\
+Vim.Components/VimBuffer/*.cs\
+Vim.Components/VimEntry/Model/*.cs\
+Vim.Components/VimEntry/Controller/*.cs\
+Vim.Components/VimEntry/View/*.cs\
+Vim.Components/VimEntry/*.cs\
+Vim.Components/*.cs\
+Vim.Main/Launcher.cs \
 AssemblyInfo.cs
 
 SOURCES_REFERENCES_BUILD=$(addprefix $(srcdir)/, $(SOURCES_REFERENCES))

Copied: mvim/trunk/src/Vim.Components (from rev 317, mvim/trunk/src/org.vim.Components)

Modified: mvim/trunk/src/Vim.Components/BufferedVimControl/BufferedVimMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/BufferedVimControl/BufferedVimMain.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/BufferedVimControl/BufferedVimMain.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,5 +1,5 @@
 
-namespace org.vim.Components.BufferedVimControl {
+namespace Vim.Components.BufferedVimControl {
     public class BufferedVimMain {
     }
 }

Modified: mvim/trunk/src/Vim.Components/BufferedVimControl/Model/BufferedVimControl.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/BufferedVimControl.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/BufferedVimControl/Model/BufferedVimControl.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -3,7 +3,7 @@
 using log4net;
 using log4net.Config;
 
-namespace org.vim.Components.BufferedVimControl.Model {
+namespace Vim.Components.BufferedVimControl.Model {
     public class BufferedVimControl : IBufferedVimControl {
         IList controlList;
         ILog log;

Modified: mvim/trunk/src/Vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/BufferedVimControl/Model/IBufferedVimControl.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,7 +1,7 @@
 /*using System.Collections;
-using org.vim.Components.VimControl.Model;
+using Vim.Components.VimControl.Model;
 
-namespace org.vim.Components.BufferedVimControl.Model {
+namespace Vim.Components.BufferedVimControl.Model {
     //
     //<summary
     //  This interface represents the main component in the Application.

Modified: mvim/trunk/src/Vim.Components/VimBuffer/Model/IVimBuffer.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimBuffer/Model/IVimBuffer.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimBuffer/Model/IVimBuffer.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,4 +1,4 @@
-namespace org.vim.Components.VimBuffer.Model {
+namespace Vim.Components.VimBuffer.Model {
     public interface IVimBuffer {
         string Text {get; set;}
     }

Modified: mvim/trunk/src/Vim.Components/VimBuffer/Model/VimBuffer.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimBuffer/Model/VimBuffer.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimBuffer/Model/VimBuffer.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,4 +1,4 @@
-namespace org.vim.Components.VimBuffer.Model {
+namespace Vim.Components.VimBuffer.Model {
 
     public class VimBuffer : IVimBuffer {
         private string text;

Modified: mvim/trunk/src/Vim.Components/VimBuffer/VimBufferMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimBuffer/VimBufferMain.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimBuffer/VimBufferMain.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,4 +1,4 @@
-namespace org.vim.Components.VimBuffer {
+namespace Vim.Components.VimBuffer {
     public class VimBufferMain {
     }
 }

Modified: mvim/trunk/src/Vim.Components/VimControl/Model/IVimControl.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimControl/Model/IVimControl.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimControl/Model/IVimControl.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -2,7 +2,7 @@
 using org.vim.Components.VimBuffer.Model;
 using org.vim.Components.VimEntry.Model;
 
-namespace org.vim.Components.VimControl.Model {
+namespace Vim.Components.VimControl.Model {
 
     //
     //<summary>

Modified: mvim/trunk/src/Vim.Components/VimControl/VimControlMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimControl/VimControlMain.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimControl/VimControlMain.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,4 +1,4 @@
-namespace org.vim.Components.VimControl {
+namespace Vim.Components.VimControl {
     public class VimControlMain {
     }
 }

Modified: mvim/trunk/src/Vim.Components/VimEntry/Controller/IVimEntryController.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Controller/IVimEntryController.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimEntry/Controller/IVimEntryController.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,5 +1,5 @@
 
-namespace org.vim.Components.VimEntry.Controller {
+namespace Vim.Components.VimEntry.Controller {
     public interface IVimEntryController {
         void Execute (string text);
     }

Modified: mvim/trunk/src/Vim.Components/VimEntry/Controller/VimEntryController.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Controller/VimEntryController.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimEntry/Controller/VimEntryController.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,7 +1,7 @@
-using org.vim.Components.VimEntry.Model;
-using org.vim.Components.VimEntry.View;
+using Vim.Components.VimEntry.Model;
+using Vim.Components.VimEntry.View;
 
-namespace org.vim.Components.VimEntry.Controller {
+namespace Vim.Components.VimEntry.Controller {
     public class VimEntryController : IVimEntryController {
         
         private IVimEntryHandler vimEntryHandler;

Modified: mvim/trunk/src/Vim.Components/VimEntry/Model/IVimEntryHandler.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Model/IVimEntryHandler.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimEntry/Model/IVimEntryHandler.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,4 +1,4 @@
-namespace org.vim.Components.VimEntry.Model {
+namespace Vim.Components.VimEntry.Model {
 //    public delegate void CommandActivatedHandler (IVimEntryHandler sender);
     public interface IVimEntryHandler {
 //        event CommandActivatedHandler CommandActivate; 

Modified: mvim/trunk/src/Vim.Components/VimEntry/Model/VimEntryHandler.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/Model/VimEntryHandler.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimEntry/Model/VimEntryHandler.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -2,7 +2,7 @@
 using log4net;
 using log4net.Config;
 
-namespace org.vim.Components.VimEntry.Model {
+namespace Vim.Components.VimEntry.Model {
     public class VimEntryHandler : IVimEntryHandler {
         
         private string command;

Modified: mvim/trunk/src/Vim.Components/VimEntry/View/IVimEntryView.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/View/IVimEntryView.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimEntry/View/IVimEntryView.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,4 +1,4 @@
-namespace org.vim.Components.VimEntry.View {
+namespace Vim.Components.VimEntry.View {
     public interface IVimEntryView {
 
     }

Modified: mvim/trunk/src/Vim.Components/VimEntry/View/VimEntryView.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/View/VimEntryView.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimEntry/View/VimEntryView.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,8 +1,8 @@
-using org.vim.Components.VimEntry.Model;
+using Vim.Components.VimEntry.Model;
 using Gtk;
 
 
-namespace org.vim.Components.VimEntry.View {
+namespace Vim.Components.VimEntry.View {
     public class VimEntryView : Gtk.Entry, IVimEntryView {
         IVimEntryHandler vimEntryHandler;
         //IVimEntryController vimEntryController;

Modified: mvim/trunk/src/Vim.Components/VimEntry/VimEntryMain.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimEntry/VimEntryMain.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimEntry/VimEntryMain.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,4 +1,4 @@
-namespace org.vim.Components.VimEntry {
+namespace Vim.Components.VimEntry {
     public class VimEntryMain {
     }
 }

Modified: mvim/trunk/src/Vim.Components/VimFactory.cs
===================================================================
--- mvim/trunk/src/org.vim.Components/VimFactory.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Components/VimFactory.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -1,7 +1,7 @@
 using log4net;
 using log4net.Config;
 
-namespace org.vim.Components {
+namespace Vim.Components {
     public class VimFactory {
         private static VimFactory vimFactory;
         

Copied: mvim/trunk/src/Vim.Main/Launcher.cs (from rev 317, mvim/trunk/src/Launcher.cs)
===================================================================
--- mvim/trunk/src/Launcher.cs	2005-02-14 08:59:27 UTC (rev 317)
+++ mvim/trunk/src/Vim.Main/Launcher.cs	2005-02-14 10:30:46 UTC (rev 319)
@@ -0,0 +1,33 @@
+using System;
+using Vim.Components.VimEntry.Model;
+namespace Vim.Main {
+    public class Launcher {
+/**
+        IView view;
+
+        public Launcher () {
+            view = new View ();
+        }
+     
+     	public Launcher (string fileUri) {
+            view = new View (fileUri);
+        }
+*/        
+        public static void Main (string[] args) {
+/*          Launcher launcher = null;
+            if (args.Length == 1) {
+                Application.Init ();
+                launcher = new Launcher (args[0]);
+            }
+            else {
+                Application.Init ();
+                launcher = new Launcher ();
+            }
+            Application.Run ();
+            Environment.Exit (0);
+*/
+//           IVimEntry vimEntry = new VimEntry ();
+//           vimEntry.Command = "EjecutaEsto";
+        }
+    }
+}



From nestor at sheep.berlios.de  Mon Feb 14 11:33:29 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 11:33:29 +0100
Subject: [Mspace-checkins] r320 - in mvim/trunk/src: . Vim.Components
Message-ID: <200502141033.j1EAXTaJ010246@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 11:33:26 +0100 (Mon, 14 Feb 2005)
New Revision: 320

Added:
   mvim/trunk/src/Vim.Components.BufferedVimControl/
   mvim/trunk/src/Vim.Components.VimBuffer/
   mvim/trunk/src/Vim.Components.VimControl/
   mvim/trunk/src/Vim.Components.VimEntry/
Removed:
   mvim/trunk/src/Vim.Components/BufferedVimControl/
   mvim/trunk/src/Vim.Components/VimBuffer/
   mvim/trunk/src/Vim.Components/VimControl/
   mvim/trunk/src/Vim.Components/VimEntry/
Log:
Created new hierachical organization for classes.


Copied: mvim/trunk/src/Vim.Components.BufferedVimControl (from rev 319, mvim/trunk/src/Vim.Components/BufferedVimControl)

Copied: mvim/trunk/src/Vim.Components.VimBuffer (from rev 319, mvim/trunk/src/Vim.Components/VimBuffer)

Copied: mvim/trunk/src/Vim.Components.VimControl (from rev 319, mvim/trunk/src/Vim.Components/VimControl)

Copied: mvim/trunk/src/Vim.Components.VimEntry (from rev 319, mvim/trunk/src/Vim.Components/VimEntry)



From nestor at sheep.berlios.de  Mon Feb 14 11:36:59 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 11:36:59 +0100
Subject: [Mspace-checkins] r321 - mvim/trunk/src
Message-ID: <200502141036.j1EAaxOg011191@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 11:36:52 +0100 (Mon, 14 Feb 2005)
New Revision: 321

Added:
   mvim/trunk/src/Vim.Components.Gtk/
   mvim/trunk/src/Vim.Components.SWF/
Modified:
   mvim/trunk/src/Makefile.am
Log:
Makefile works. 



Modified: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-14 10:33:26 UTC (rev 320)
+++ mvim/trunk/src/Makefile.am	2005-02-14 10:36:52 UTC (rev 321)
@@ -15,23 +15,25 @@
 RESOURCES_REFERENCES_BUILD=$(foreach res, $(RESOURCES_REFERENCES),$(addprefix -resource:,$(res)),$(notdir $(res)))
 
 SOURCES_REFERENCES=\
-Vim.Components/BufferedVimControl/Model/*.cs\
-Vim.Components/BufferedVimControl/Controller/*.cs\
-Vim.Components/BufferedVimControl/View/*.cs\
-Vim.Components/BufferedVimControl/*.cs\
-Vim.Components/VimControl/Model/*.cs\
-Vim.Components/VimControl/Controller/*.cs\
-Vim.Components/VimControl/View/*.cs\
-Vim.Components/VimControl/*.cs\
-Vim.Components/VimBuffer/Model/*.cs\
-Vim.Components/VimBuffer/Controller/*.cs\
-Vim.Components/VimBuffer/View/*.cs\
-Vim.Components/VimBuffer/*.cs\
-Vim.Components/VimEntry/Model/*.cs\
-Vim.Components/VimEntry/Controller/*.cs\
-Vim.Components/VimEntry/View/*.cs\
-Vim.Components/VimEntry/*.cs\
+Vim.Components.BufferedVimControl/Model/*.cs\
+Vim.Components.BufferedVimControl/Controller/*.cs\
+Vim.Components.BufferedVimControl/View/*.cs\
+Vim.Components.BufferedVimControl/*.cs\
+Vim.Components.VimControl/Model/*.cs\
+Vim.Components.VimControl/Controller/*.cs\
+Vim.Components.VimControl/View/*.cs\
+Vim.Components.VimControl/*.cs\
+Vim.Components.VimBuffer/Model/*.cs\
+Vim.Components.VimBuffer/Controller/*.cs\
+Vim.Components.VimBuffer/View/*.cs\
+Vim.Components.VimBuffer/*.cs\
+Vim.Components.VimEntry/Model/*.cs\
+Vim.Components.VimEntry/Controller/*.cs\
+Vim.Components.VimEntry/View/*.cs\
+Vim.Components.VimEntry/*.cs\
 Vim.Components/*.cs\
+Vim.Components.Gtk/*.cs\
+Vim.Components.SWF/*.cs\
 Vim.Main/Launcher.cs \
 AssemblyInfo.cs
 



From nestor at sheep.berlios.de  Mon Feb 14 12:44:55 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 12:44:55 +0100
Subject: [Mspace-checkins] r322 - in mvim/trunk: . doc doc/monodoc
Message-ID: <200502141144.j1EBitFI008640@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 12:44:52 +0100 (Mon, 14 Feb 2005)
New Revision: 322

Added:
   mvim/trunk/doc/monodoc/
   mvim/trunk/doc/monodoc/org.vim.Components.BufferedVimControl/
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer.Model/
   mvim/trunk/doc/monodoc/org.vim.Components.VimBuffer/
   mvim/trunk/doc/monodoc/org.vim.Components.VimControl/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Controller/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.Model/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry.View/
   mvim/trunk/doc/monodoc/org.vim.Components.VimEntry/
   mvim/trunk/doc/monodoc/org.vim.Components/
   mvim/trunk/doc/monodoc/org.vim.Main/
Removed:
   mvim/trunk/doc/monodoc/
Modified:
   mvim/trunk/Makefile.am
Log:
Fixed Doc

Modified: mvim/trunk/Makefile.am
===================================================================
--- mvim/trunk/Makefile.am	2005-02-14 10:36:52 UTC (rev 321)
+++ mvim/trunk/Makefile.am	2005-02-14 11:44:52 UTC (rev 322)
@@ -1 +1 @@
-SUBDIRS = src doc
+SUBDIRS = src #doc



From rubiojr at sheep.berlios.de  Mon Feb 14 13:13:47 2005
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Mon, 14 Feb 2005 13:13:47 +0100
Subject: [Mspace-checkins] r323 - in mvim/trunk/src: . Vim.Components.Commands Vim.Components.Commands/Commands
Message-ID: <200502141213.j1ECDlBu010381@sheep.berlios.de>

Author: rubiojr
Date: 2005-02-14 13:13:45 +0100 (Mon, 14 Feb 2005)
New Revision: 323

Added:
   mvim/trunk/src/Vim.Components.Commands/
   mvim/trunk/src/Vim.Components.Commands/CommandLoader.cs
   mvim/trunk/src/Vim.Components.Commands/CommandManager.cs
   mvim/trunk/src/Vim.Components.Commands/Commands.cmbx
   mvim/trunk/src/Vim.Components.Commands/Commands.prjx
   mvim/trunk/src/Vim.Components.Commands/Commands/
   mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs
   mvim/trunk/src/Vim.Components.Commands/ICommand.cs
   mvim/trunk/src/Vim.Components.Commands/ICommandLoaderStrategy.cs
   mvim/trunk/src/Vim.Components.Commands/SimpleCommandLoaderStrategy.cs
Log:
Firs skeleton of Vim.Components.Commands

Added: mvim/trunk/src/Vim.Components.Commands/CommandLoader.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/CommandLoader.cs	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/CommandLoader.cs	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,20 @@
+/*
+ * Created by SharpDevelop.
+ * User: rubiojr
+ * Date: 14/02/2005
+ * Time: 12:48
+ * 
+ * To change this template use Tools | Options | Coding | Edit Standard Headers.
+ */
+ 
+using System;
+namespace Vim.Components.Commands
+{
+	/// <summary>
+	/// Description of MyClass.
+	/// </summary>
+	public class CommandLoader
+	{
+		private ICommandLoaderStrategy strategy;
+	}
+}

Added: mvim/trunk/src/Vim.Components.Commands/CommandManager.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/CommandManager.cs	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/CommandManager.cs	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,23 @@
+/*
+ * Created by SharpDevelop.
+ * User: rubiojr
+ * Date: 14/02/2005
+ * Time: 12:52
+ * 
+ * To change this template use Tools | Options | Coding | Edit Standard Headers.
+ */
+
+using System;
+
+namespace Vim.Components.Commands
+{
+	/// <summary>
+	/// Description of CommandManager.
+	/// </summary>
+	public class CommandManager
+	{
+		public CommandManager()
+		{
+		}
+	}
+}

Added: mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,42 @@
+/*
+ * Created by SharpDevelop.
+ * User: rubiojr
+ * Date: 14/02/2005
+ * Time: 13:03
+ * 
+ * To change this template use Tools | Options | Coding | Edit Standard Headers.
+ */
+
+using System;
+using System.Collections;
+
+namespace Vim.Components.Commands
+{
+	/// <summary>
+	/// Description of Class1.
+	/// </summary>
+	public class TestCommand : ICommand
+	{
+		
+		private ArrayList aliases;
+		public TestCommand (){
+		}
+	
+		public string Name {
+			get {
+				return "TestCommand";
+			}
+		}
+		
+		public ArrayList Aliases {
+			get {
+				return aliases;
+			}
+		}
+		
+		public void Execute (object[] parameters)
+		{
+			
+		}
+	}
+}

Added: mvim/trunk/src/Vim.Components.Commands/Commands.cmbx
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/Commands.cmbx	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/Commands.cmbx	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,16 @@
+<Combine fileversion="1.0" name="Commands" description="">
+  <StartMode startupentry="Commands" single="True">
+    <Execute entry="Commands" type="None" />
+  </StartMode>
+  <Entries>
+    <Entry filename=".\.\Commands.prjx" />
+  </Entries>
+  <Configurations active="Debug">
+    <Configuration name="Release">
+      <Entry name="Commands" configurationname="Debug" build="False" />
+    </Configuration>
+    <Configuration name="Debug">
+      <Entry name="Commands" configurationname="Debug" build="False" />
+    </Configuration>
+  </Configurations>
+</Combine>
\ No newline at end of file

Added: mvim/trunk/src/Vim.Components.Commands/Commands.prjx
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/Commands.prjx	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/Commands.prjx	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,30 @@
+<Project name="Commands" standardNamespace="Vim.Components.Commands" description="" newfilesearch="None" enableviewstate="True" version="1.1" projecttype="C#">
+  <Contents>
+    <File name=".\ICommand.cs" subtype="Code" buildaction="Compile" dependson="" data="" />
+    <File name=".\CommandLoader.cs" subtype="Code" buildaction="Compile" dependson="" data="" />
+    <File name=".\CommandManager.cs" subtype="Code" buildaction="Compile" dependson="" data="" />
+    <File name=".\ICommandLoaderStrategy.cs" subtype="Code" buildaction="Compile" dependson="" data="" />
+    <File name=".\SimpleCommandLoaderStrategy.cs" subtype="Code" buildaction="Compile" dependson="" data="" />
+    <File name=".\Commands" subtype="Directory" buildaction="Compile" dependson="" data="" />
+    <File name=".\Commands\TestCommand.cs" subtype="Code" buildaction="Compile" dependson="" data="" />
+  </Contents>
+  <References />
+  <DeploymentInformation target="" script="" strategy="File" />
+  <Configuration runwithwarnings="True" name="Debug">
+    <CodeGeneration runtime="MsNet" compiler="Csc" compilerversion="" warninglevel="4" nowarn="" includedebuginformation="True" optimize="False" unsafecodeallowed="False" generateoverflowchecks="True" mainclass="" target="Library" definesymbols="" generatexmldocumentation="False" win32Icon="" noconfig="False" nostdlib="False" />
+    <Execution commandlineparameters="" consolepause="False" />
+    <Output directory="..\bin\Debug" assembly="Commands" executeScript="" executeBeforeBuild="" executeAfterBuild="" executeBeforeBuildArguments="" executeAfterBuildArguments="" />
+  </Configuration>
+  <Configurations active="Debug">
+    <Configuration runwithwarnings="True" name="Debug">
+      <CodeGeneration runtime="MsNet" compiler="Csc" compilerversion="" warninglevel="4" nowarn="" includedebuginformation="True" optimize="False" unsafecodeallowed="False" generateoverflowchecks="True" mainclass="" target="Library" definesymbols="" generatexmldocumentation="False" win32Icon="" noconfig="False" nostdlib="False" />
+      <Execution commandlineparameters="" consolepause="False" />
+      <Output directory="..\bin\Debug" assembly="Commands" executeScript="" executeBeforeBuild="" executeAfterBuild="" executeBeforeBuildArguments="" executeAfterBuildArguments="" />
+    </Configuration>
+    <Configuration runwithwarnings="True" name="Release">
+      <CodeGeneration runtime="MsNet" compiler="Csc" compilerversion="" warninglevel="4" nowarn="" includedebuginformation="False" optimize="True" unsafecodeallowed="False" generateoverflowchecks="False" mainclass="" target="Library" definesymbols="" generatexmldocumentation="False" win32Icon="" noconfig="False" nostdlib="False" />
+      <Execution commandlineparameters="" consolepause="False" />
+      <Output directory="..\bin\Release" assembly="Commands" executeScript="" executeBeforeBuild="" executeAfterBuild="" executeBeforeBuildArguments="" executeAfterBuildArguments="" />
+    </Configuration>
+  </Configurations>
+</Project>
\ No newline at end of file

Added: mvim/trunk/src/Vim.Components.Commands/ICommand.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/ICommand.cs	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/ICommand.cs	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,24 @@
+/*
+ * Created by SharpDevelop.
+ * User: rubiojr
+ * Date: 14/02/2005
+ * Time: 12:40
+ * 
+ * To change this template use Tools | Options | Coding | Edit Standard Headers.
+ */
+using System;
+using System.Collections;
+
+namespace Vim.Components.Commands
+{
+	/// <summary>
+	/// Description of MyClass.
+	/// </summary>
+	public interface ICommand
+	{
+		void Execute (object[] parameters);
+		
+		ArrayList Aliases { get; }
+		string Name { get; }
+	}
+}

Added: mvim/trunk/src/Vim.Components.Commands/ICommandLoaderStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/ICommandLoaderStrategy.cs	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/ICommandLoaderStrategy.cs	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,21 @@
+/*
+ * Created by SharpDevelop.
+ * User: rubiojr
+ * Date: 14/02/2005
+ * Time: 12:56
+ * 
+ * To change this template use Tools | Options | Coding | Edit Standard Headers.
+ */
+
+using System;
+
+namespace Vim.Components.Commands
+{
+	/// <summary>
+	/// Description of Class1.
+	/// </summary>
+	public interface ICommandLoaderStrategy
+	{
+		void LoadCommands ();
+	}
+}

Added: mvim/trunk/src/Vim.Components.Commands/SimpleCommandLoaderStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/SimpleCommandLoaderStrategy.cs	2005-02-14 11:44:52 UTC (rev 322)
+++ mvim/trunk/src/Vim.Components.Commands/SimpleCommandLoaderStrategy.cs	2005-02-14 12:13:45 UTC (rev 323)
@@ -0,0 +1,24 @@
+/*
+ * Created by SharpDevelop.
+ * User: rubiojr
+ * Date: 14/02/2005
+ * Time: 12:59
+ * 
+ * To change this template use Tools | Options | Coding | Edit Standard Headers.
+ */
+
+using System;
+
+namespace Vim.Components.Commands
+{
+	/// <summary>
+	/// Description of SimpleCommandLoaderStrategy.
+	/// </summary>
+	public class SimpleCommandLoaderStrategy : ICommandLoaderStrategy
+	{
+		public void LoadCommands ()
+		{
+		
+		}
+	}
+}



From rubiojr at sheep.berlios.de  Mon Feb 14 13:14:24 2005
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Mon, 14 Feb 2005 13:14:24 +0100
Subject: [Mspace-checkins] r324 - /
Message-ID: <200502141214.j1ECEOIZ010446@sheep.berlios.de>

Author: rubiojr
Date: 2005-02-14 13:14:24 +0100 (Mon, 14 Feb 2005)
New Revision: 324

Added:
   Vim.cmbx
Log:
Added SharpDevelop combine file

Added: Vim.cmbx
===================================================================
--- Vim.cmbx	2005-02-14 12:13:45 UTC (rev 323)
+++ Vim.cmbx	2005-02-14 12:14:24 UTC (rev 324)
@@ -0,0 +1,16 @@
+<Combine fileversion="1.0" name="Vim" description="">
+  <StartMode startupentry="Vim" single="True">
+    <Execute entry="Commands" type="None" />
+  </StartMode>
+  <Entries>
+    <Entry filename=".\mvim\trunk\src\Vim.Components.Commands\Commands.prjx" />
+  </Entries>
+  <Configurations active="Debug">
+    <Configuration name="Release">
+      <Entry name="Commands" configurationname="Debug" build="False" />
+    </Configuration>
+    <Configuration name="Debug">
+      <Entry name="Commands" configurationname="Debug" build="False" />
+    </Configuration>
+  </Configurations>
+</Combine>
\ No newline at end of file



From nestor at sheep.berlios.de  Mon Feb 14 20:07:22 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 20:07:22 +0100
Subject: [Mspace-checkins] r325 - in mvim/trunk: doc src
Message-ID: <200502141907.j1EJ7Mfe021102@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 20:07:18 +0100 (Mon, 14 Feb 2005)
New Revision: 325

Added:
   mvim/trunk/doc/org.vim.tree
   mvim/trunk/doc/org.vim.zip
   mvim/trunk/src/log4net.dll
Removed:
   mvim/trunk/src/log4net.dll
Log:
Fix some bugs of document generation.

Change src/log4net.dll linked to lib/log4net.dll  (Smaller Hard Disk Usage)


Added: mvim/trunk/doc/org.vim.tree
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/doc/org.vim.tree
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: mvim/trunk/doc/org.vim.zip
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/doc/org.vim.zip
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Deleted: mvim/trunk/src/log4net.dll
===================================================================
(Binary files differ)

Added: mvim/trunk/src/log4net.dll
===================================================================
--- mvim/trunk/src/log4net.dll	2005-02-14 12:14:24 UTC (rev 324)
+++ mvim/trunk/src/log4net.dll	2005-02-14 19:07:18 UTC (rev 325)
@@ -0,0 +1 @@
+link lib/log4net.dll
\ No newline at end of file


Property changes on: mvim/trunk/src/log4net.dll
___________________________________________________________________
Name: svn:special
   + *



From nestor at sheep.berlios.de  Mon Feb 14 23:58:26 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Mon, 14 Feb 2005 23:58:26 +0100
Subject: [Mspace-checkins] r326 - mvim/trunk/src/Vim.Components.VimBuffer/Model
Message-ID: <200502142258.j1EMwPK1002515@sheep.berlios.de>

Author: nestor
Date: 2005-02-14 23:58:24 +0100 (Mon, 14 Feb 2005)
New Revision: 326

Added:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs
Modified:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs
Log:
Added sample GapImplementation from SharpDevelop.  
Check algorithmy.


Added: mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs	2005-02-14 19:07:18 UTC (rev 325)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs	2005-02-14 22:58:24 UTC (rev 326)
@@ -0,0 +1,105 @@
+using System;
+using System.Text;
+
+namespace Vim.Components.VimBuffer.Model {
+    public class GapTextBufferStrategy : ITextBufferStrategy {
+        private char[] buffer = new char [0];
+
+        int gapBeginOffset = 0;
+        int gapEndOffset = 0;
+
+        int minGapLength = 32;
+        int maxGapLength = 256;
+
+        int GapLength {
+            get {return gapEndOffset - gapBeginOffset;}
+        }
+
+        public int Length {
+            get {return buffer.Length - GapLength;}
+        }
+
+        public void SetContent (string text) {
+            if (text == null)
+                text = String.Empty;
+            buffer = text.ToCharArray ();
+            gapBeginOffset = gapEndOffset = 0;
+        }
+
+        public char GetCharAt (int offset) {
+            if (offset < gapBeginOffset)
+                return buffer [offset];
+            else
+                return buffer [offset + GapLength];
+        }
+        
+        public string GetText (int offset, int length) {
+            int end = offset + length;
+            if (end < gapBeginOffset) {
+                return new string (buffer, offset, length);
+            }
+            if (gapBeginOffset < offset) {
+                return new string (buffer, offset + GapLength, length);
+            }
+
+            StringBuilder buf = new StringBuilder ();
+            buf.Append (buffer, offset, gapBeginOffset - offset);
+            buf.Append (buffer, gapEndOffset, end - gapBeginOffset);
+            return buf.ToString ();
+        }
+
+        public void Insert (int offset, string text) {
+            this.Replace (offset, 0, text);
+        }
+
+        public void Remove (int offset, int length) {
+            this.Replace (offset, length, String.Empty);
+        }
+
+        public void Replace (int offset, int length, string text) {
+            if (text == null)
+                text = String.Empty;
+            PlaceGap (offset + length, Math.Max (0, text.Length - length));
+            text.CopyTo (0, buffer, offset, Math.Min (text.Length, length));
+            
+            if (text.Length < length) 
+                gapBeginOffset -= length - text.Length;
+            else 
+                if (text.Length > length) {
+                    int deltaLength = text.Length - length;
+                    gapBeginOffset += deltaLength;
+                    text.CopyTo (length, buffer, offset+length, text.Length - length);
+                }
+        }
+
+        void PlaceGap (int offset, int length) {
+            int oldLength = GapLength;
+            int newLength = maxGapLength + length;
+            int newGapEndOffset = offset + newLength;
+            char[] newBuffer = new char [buffer.Length + newLength - oldLength];
+            
+            if (oldLength == 0) {
+                Array.Copy (buffer, 0, newBuffer, 0, offset);
+                Array.Copy (buffer, offset, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
+            }
+            else
+                if (offset < gapBeginOffset) {
+                    int delta = gapBeginOffset - offset;
+                    Array.Copy (buffer, 0, newBuffer, 0, offset);
+                    Array.Copy (buffer, offset, newBuffer, newGapEndOffset, delta);
+                    Array.Copy (buffer, gapEndOffset, newBuffer, newGapEndOffset + delta, buffer.Length - gapEndOffset);
+                    
+                }
+                else {
+                    int delta = offset - gapBeginOffset;
+                    Array.Copy (buffer, 0, newBuffer, 0 , gapBeginOffset);
+                    Array.Copy (buffer, gapEndOffset, newBuffer, gapBeginOffset, delta);
+                    Array.Copy (buffer, gapEndOffset + delta, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
+                }
+            buffer = newBuffer;
+            gapBeginOffset = offset;
+            gapEndOffset = newGapEndOffset;
+        }
+
+    }
+}

Added: mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs	2005-02-14 19:07:18 UTC (rev 325)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs	2005-02-14 22:58:24 UTC (rev 326)
@@ -0,0 +1,12 @@
+
+namespace Vim.Components.VimBuffer.Model {
+    public interface ITextBufferStrategy {
+        int Length {get;}
+        void Insert (int offset, string text);
+        void Remove (int offset, int length);
+        void Replace (int offset,int length, string text);
+        string GetText (int offset, int length);
+        char GetCharAt (int offset);
+        void SetContent (string text);
+    }
+}

Modified: mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs	2005-02-14 19:07:18 UTC (rev 325)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs	2005-02-14 22:58:24 UTC (rev 326)
@@ -1,5 +1,18 @@
+//
+// Vim.Components.VimBuffer.Model.IVimBuffer.cs :  
+//
+// Author:
+//      N?stor Salceda Alonso (wizito at gentelibre.org)
+// (C) 2005
+
 namespace Vim.Components.VimBuffer.Model {
+    //
+    //<summary>
+    //  We try use same Buffer as SharpDevelop do.
+    //  Try use a Gap Buffer.
+    //</summary>
+    //
     public interface IVimBuffer {
-        string Text {get; set;}
+         
     }
 }



From nestor at sheep.berlios.de  Tue Feb 15 21:53:50 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 21:53:50 +0100
Subject: [Mspace-checkins] r327 - in mvim/trunk/src/Vim.Components.VimBuffer/Model: . VimBufferStrategy
Message-ID: <200502152053.j1FKrosI003040@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 21:53:49 +0100 (Tue, 15 Feb 2005)
New Revision: 327

Added:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs
Removed:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs
Log:
Added Strategy design pattern for Buffer behaviour.


Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs	2005-02-14 22:58:24 UTC (rev 326)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs	2005-02-15 20:53:49 UTC (rev 327)
@@ -1,105 +0,0 @@
-using System;
-using System.Text;
-
-namespace Vim.Components.VimBuffer.Model {
-    public class GapTextBufferStrategy : ITextBufferStrategy {
-        private char[] buffer = new char [0];
-
-        int gapBeginOffset = 0;
-        int gapEndOffset = 0;
-
-        int minGapLength = 32;
-        int maxGapLength = 256;
-
-        int GapLength {
-            get {return gapEndOffset - gapBeginOffset;}
-        }
-
-        public int Length {
-            get {return buffer.Length - GapLength;}
-        }
-
-        public void SetContent (string text) {
-            if (text == null)
-                text = String.Empty;
-            buffer = text.ToCharArray ();
-            gapBeginOffset = gapEndOffset = 0;
-        }
-
-        public char GetCharAt (int offset) {
-            if (offset < gapBeginOffset)
-                return buffer [offset];
-            else
-                return buffer [offset + GapLength];
-        }
-        
-        public string GetText (int offset, int length) {
-            int end = offset + length;
-            if (end < gapBeginOffset) {
-                return new string (buffer, offset, length);
-            }
-            if (gapBeginOffset < offset) {
-                return new string (buffer, offset + GapLength, length);
-            }
-
-            StringBuilder buf = new StringBuilder ();
-            buf.Append (buffer, offset, gapBeginOffset - offset);
-            buf.Append (buffer, gapEndOffset, end - gapBeginOffset);
-            return buf.ToString ();
-        }
-
-        public void Insert (int offset, string text) {
-            this.Replace (offset, 0, text);
-        }
-
-        public void Remove (int offset, int length) {
-            this.Replace (offset, length, String.Empty);
-        }
-
-        public void Replace (int offset, int length, string text) {
-            if (text == null)
-                text = String.Empty;
-            PlaceGap (offset + length, Math.Max (0, text.Length - length));
-            text.CopyTo (0, buffer, offset, Math.Min (text.Length, length));
-            
-            if (text.Length < length) 
-                gapBeginOffset -= length - text.Length;
-            else 
-                if (text.Length > length) {
-                    int deltaLength = text.Length - length;
-                    gapBeginOffset += deltaLength;
-                    text.CopyTo (length, buffer, offset+length, text.Length - length);
-                }
-        }
-
-        void PlaceGap (int offset, int length) {
-            int oldLength = GapLength;
-            int newLength = maxGapLength + length;
-            int newGapEndOffset = offset + newLength;
-            char[] newBuffer = new char [buffer.Length + newLength - oldLength];
-            
-            if (oldLength == 0) {
-                Array.Copy (buffer, 0, newBuffer, 0, offset);
-                Array.Copy (buffer, offset, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
-            }
-            else
-                if (offset < gapBeginOffset) {
-                    int delta = gapBeginOffset - offset;
-                    Array.Copy (buffer, 0, newBuffer, 0, offset);
-                    Array.Copy (buffer, offset, newBuffer, newGapEndOffset, delta);
-                    Array.Copy (buffer, gapEndOffset, newBuffer, newGapEndOffset + delta, buffer.Length - gapEndOffset);
-                    
-                }
-                else {
-                    int delta = offset - gapBeginOffset;
-                    Array.Copy (buffer, 0, newBuffer, 0 , gapBeginOffset);
-                    Array.Copy (buffer, gapEndOffset, newBuffer, gapBeginOffset, delta);
-                    Array.Copy (buffer, gapEndOffset + delta, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
-                }
-            buffer = newBuffer;
-            gapBeginOffset = offset;
-            gapEndOffset = newGapEndOffset;
-        }
-
-    }
-}

Copied: mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs (from rev 326, mvim/trunk/src/Vim.Components.VimBuffer/Model/GapTextBufferStrategy.cs)

Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs	2005-02-14 22:58:24 UTC (rev 326)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs	2005-02-15 20:53:49 UTC (rev 327)
@@ -1,12 +0,0 @@
-
-namespace Vim.Components.VimBuffer.Model {
-    public interface ITextBufferStrategy {
-        int Length {get;}
-        void Insert (int offset, string text);
-        void Remove (int offset, int length);
-        void Replace (int offset,int length, string text);
-        string GetText (int offset, int length);
-        char GetCharAt (int offset);
-        void SetContent (string text);
-    }
-}

Copied: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs (from rev 326, mvim/trunk/src/Vim.Components.VimBuffer/Model/ITextBufferStrategy.cs)



From nestor at sheep.berlios.de  Tue Feb 15 22:26:01 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 22:26:01 +0100
Subject: [Mspace-checkins] r328 - in mvim/trunk/src: . Vim.Components.VimBuffer/Model Vim.Components.VimBuffer/Model/VimBufferStrategy
Message-ID: <200502152126.j1FLQ12a005000@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 22:26:00 +0100 (Tue, 15 Feb 2005)
New Revision: 328

Added:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs
Removed:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs
Modified:
   mvim/trunk/src/Makefile.am
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs
Log:
Added StringVimBufferStrategy


Modified: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-15 20:53:49 UTC (rev 327)
+++ mvim/trunk/src/Makefile.am	2005-02-15 21:26:00 UTC (rev 328)
@@ -24,6 +24,7 @@
 Vim.Components.VimControl/View/*.cs\
 Vim.Components.VimControl/*.cs\
 Vim.Components.VimBuffer/Model/*.cs\
+Vim.Components.VimBuffer/Model/VimBufferStrategy/*.cs\
 Vim.Components.VimBuffer/Controller/*.cs\
 Vim.Components.VimBuffer/View/*.cs\
 Vim.Components.VimBuffer/*.cs\

Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs	2005-02-15 20:53:49 UTC (rev 327)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs	2005-02-15 21:26:00 UTC (rev 328)
@@ -1,105 +0,0 @@
-using System;
-using System.Text;
-
-namespace Vim.Components.VimBuffer.Model {
-    public class GapTextBufferStrategy : ITextBufferStrategy {
-        private char[] buffer = new char [0];
-
-        int gapBeginOffset = 0;
-        int gapEndOffset = 0;
-
-        int minGapLength = 32;
-        int maxGapLength = 256;
-
-        int GapLength {
-            get {return gapEndOffset - gapBeginOffset;}
-        }
-
-        public int Length {
-            get {return buffer.Length - GapLength;}
-        }
-
-        public void SetContent (string text) {
-            if (text == null)
-                text = String.Empty;
-            buffer = text.ToCharArray ();
-            gapBeginOffset = gapEndOffset = 0;
-        }
-
-        public char GetCharAt (int offset) {
-            if (offset < gapBeginOffset)
-                return buffer [offset];
-            else
-                return buffer [offset + GapLength];
-        }
-        
-        public string GetText (int offset, int length) {
-            int end = offset + length;
-            if (end < gapBeginOffset) {
-                return new string (buffer, offset, length);
-            }
-            if (gapBeginOffset < offset) {
-                return new string (buffer, offset + GapLength, length);
-            }
-
-            StringBuilder buf = new StringBuilder ();
-            buf.Append (buffer, offset, gapBeginOffset - offset);
-            buf.Append (buffer, gapEndOffset, end - gapBeginOffset);
-            return buf.ToString ();
-        }
-
-        public void Insert (int offset, string text) {
-            this.Replace (offset, 0, text);
-        }
-
-        public void Remove (int offset, int length) {
-            this.Replace (offset, length, String.Empty);
-        }
-
-        public void Replace (int offset, int length, string text) {
-            if (text == null)
-                text = String.Empty;
-            PlaceGap (offset + length, Math.Max (0, text.Length - length));
-            text.CopyTo (0, buffer, offset, Math.Min (text.Length, length));
-            
-            if (text.Length < length) 
-                gapBeginOffset -= length - text.Length;
-            else 
-                if (text.Length > length) {
-                    int deltaLength = text.Length - length;
-                    gapBeginOffset += deltaLength;
-                    text.CopyTo (length, buffer, offset+length, text.Length - length);
-                }
-        }
-
-        void PlaceGap (int offset, int length) {
-            int oldLength = GapLength;
-            int newLength = maxGapLength + length;
-            int newGapEndOffset = offset + newLength;
-            char[] newBuffer = new char [buffer.Length + newLength - oldLength];
-            
-            if (oldLength == 0) {
-                Array.Copy (buffer, 0, newBuffer, 0, offset);
-                Array.Copy (buffer, offset, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
-            }
-            else
-                if (offset < gapBeginOffset) {
-                    int delta = gapBeginOffset - offset;
-                    Array.Copy (buffer, 0, newBuffer, 0, offset);
-                    Array.Copy (buffer, offset, newBuffer, newGapEndOffset, delta);
-                    Array.Copy (buffer, gapEndOffset, newBuffer, newGapEndOffset + delta, buffer.Length - gapEndOffset);
-                    
-                }
-                else {
-                    int delta = offset - gapBeginOffset;
-                    Array.Copy (buffer, 0, newBuffer, 0 , gapBeginOffset);
-                    Array.Copy (buffer, gapEndOffset, newBuffer, gapBeginOffset, delta);
-                    Array.Copy (buffer, gapEndOffset + delta, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
-                }
-            buffer = newBuffer;
-            gapBeginOffset = offset;
-            gapEndOffset = newGapEndOffset;
-        }
-
-    }
-}

Copied: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs (from rev 327, mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs)
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/GapVimBufferStrategy.cs	2005-02-15 20:53:49 UTC (rev 327)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs	2005-02-15 21:26:00 UTC (rev 328)
@@ -0,0 +1,113 @@
+using System;
+using System.Text;
+
+namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
+    public class GapTextBufferStrategy : IVimBufferStrategy {
+        private char[] buffer = new char [0];
+
+        int gapBeginOffset = 0;
+        int gapEndOffset = 0;
+
+        int minGapLength = 32;
+        int maxGapLength = 256;
+
+        int GapLength {
+            get {return gapEndOffset - gapBeginOffset;}
+        }
+
+        public int Length {
+            get {return buffer.Length - GapLength;}
+        }
+
+        public void SetContent (string text) {
+            if (text == null)
+                text = String.Empty;
+            buffer = text.ToCharArray ();
+            gapBeginOffset = gapEndOffset = 0;
+        }
+
+        //public char GetCharAt (int offset) {
+        //    if (offset < gapBeginOffset)
+        //        return buffer [offset];
+        //    else
+        //        return buffer [offset + GapLength];
+        //}
+        public char this [int offset] {
+            get {
+                if (offset < gapBeginOffset)
+                    return buffer [offset];
+                else
+                    return buffer [offset + GapLength];
+            }
+        }
+        
+        public string GetText (int offset, int length) {
+            int end = offset + length;
+            if (end < gapBeginOffset) {
+                return new string (buffer, offset, length);
+            }
+            if (gapBeginOffset < offset) {
+                return new string (buffer, offset + GapLength, length);
+            }
+
+            StringBuilder buf = new StringBuilder ();
+            buf.Append (buffer, offset, gapBeginOffset - offset);
+            buf.Append (buffer, gapEndOffset, end - gapBeginOffset);
+            return buf.ToString ();
+        }
+
+        public void Insert (int offset, string text) {
+            this.Replace (offset, 0, text);
+        }
+
+        public void Remove (int offset, int length) {
+            this.Replace (offset, length, String.Empty);
+        }
+
+        public void Replace (int offset, int length, string text) {
+            if (text == null)
+                text = String.Empty;
+            PlaceGap (offset + length, Math.Max (0, text.Length - length));
+            text.CopyTo (0, buffer, offset, Math.Min (text.Length, length));
+            
+            if (text.Length < length) 
+                gapBeginOffset -= length - text.Length;
+            else 
+                if (text.Length > length) {
+                    int deltaLength = text.Length - length;
+                    gapBeginOffset += deltaLength;
+                    text.CopyTo (length, buffer, offset+length, text.Length - length);
+                }
+        }
+
+        void PlaceGap (int offset, int length) {
+            int oldLength = GapLength;
+            int newLength = maxGapLength + length;
+            int newGapEndOffset = offset + newLength;
+            char[] newBuffer = new char [buffer.Length + newLength - oldLength];
+            
+            if (oldLength == 0) {
+                Array.Copy (buffer, 0, newBuffer, 0, offset);
+                Array.Copy (buffer, offset, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
+            }
+            else
+                if (offset < gapBeginOffset) {
+                    int delta = gapBeginOffset - offset;
+                    Array.Copy (buffer, 0, newBuffer, 0, offset);
+                    Array.Copy (buffer, offset, newBuffer, newGapEndOffset, delta);
+                    Array.Copy (buffer, gapEndOffset, newBuffer, newGapEndOffset + delta, buffer.Length - gapEndOffset);
+                    
+                }
+                else {
+                    int delta = offset - gapBeginOffset;
+                    Array.Copy (buffer, 0, newBuffer, 0 , gapBeginOffset);
+                    Array.Copy (buffer, gapEndOffset, newBuffer, gapBeginOffset, delta);
+                    Array.Copy (buffer, gapEndOffset + delta, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
+                }
+            buffer = newBuffer;
+            gapBeginOffset = offset;
+            gapEndOffset = newGapEndOffset;
+        }
+
+    }
+}

Modified: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs	2005-02-15 20:53:49 UTC (rev 327)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs	2005-02-15 21:26:00 UTC (rev 328)
@@ -1,12 +1,13 @@
 
-namespace Vim.Components.VimBuffer.Model {
-    public interface ITextBufferStrategy {
+namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
+    public interface IVimBufferStrategy {
         int Length {get;}
+        char this [int offset] {get;}
+        
         void Insert (int offset, string text);
         void Remove (int offset, int length);
         void Replace (int offset,int length, string text);
         string GetText (int offset, int length);
-        char GetCharAt (int offset);
         void SetContent (string text);
     }
 }

Added: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs	2005-02-15 20:53:49 UTC (rev 327)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs	2005-02-15 21:26:00 UTC (rev 328)
@@ -0,0 +1,39 @@
+using System;
+
+namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
+    public class StringVimBufferStrategy : IVimBufferStrategy {
+        private string text;
+   
+        public StringVimBufferStrategy () {
+        }
+        
+        public int Length {
+            get {return text.Length;}
+        }
+
+        public char this [int offset] {
+            get {return text[offset];}
+        }
+
+        public void Insert (int offset, string text) {
+            this.text = this.text.Insert (offset, text);
+        }
+
+        public void Remove (int offset, int length) {
+            text = text.Remove (offset, length);
+        }
+
+        public void Replace (int offset, int length, string text) {
+            Remove (offset, length);
+            Insert (offset, text);
+        }
+
+        public string GetText (int offset, int length) {
+            return text.Substring (offset, Math.Min (length, text.Length - offset));
+        }
+
+        public void SetContent (string text) {
+            this.text = text;
+        }
+    }
+}



From nestor at sheep.berlios.de  Tue Feb 15 23:15:08 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 23:15:08 +0100
Subject: [Mspace-checkins] r329 - mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy
Message-ID: <200502152215.j1FMF8lF007244@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 23:15:07 +0100 (Tue, 15 Feb 2005)
New Revision: 329

Modified:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs
Log:
Added documented gap algorithmy.



Modified: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs	2005-02-15 21:26:00 UTC (rev 328)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs	2005-02-15 22:15:07 UTC (rev 329)
@@ -1,3 +1,11 @@
+//
+// Vim.Components.VimBuffer.Model.VimBufferStrategy.IVimBufferStrategy.cs :
+//      An implementation of a IVimBufferStrategy with a gap buffer.
+//
+// Author:
+//      N?stor Salceda Alonso (wizito at gentelibre.org)
+// (C) 2005
+
 using System;
 using System.Text;
 
@@ -8,17 +16,29 @@
         int gapBeginOffset = 0;
         int gapEndOffset = 0;
 
-        int minGapLength = 32;
-        int maxGapLength = 256;
+        const int minGapLength = 32;
+        const int maxGapLength = 256;
 
+        /**
+         * Returns Gap's length.
+         */
         int GapLength {
             get {return gapEndOffset - gapBeginOffset;}
         }
-
+        
+        /**
+         * Returns buffer's length.  
+         * Note: The length is total length minus gap's length, because gap must
+         * be hidden.  Count all char in buffer.
+         */
         public int Length {
             get {return buffer.Length - GapLength;}
         }
-
+        
+        /**
+         * Sets buffer's content, and reset gap position. Later gap will be
+         * placed.
+         */
         public void SetContent (string text) {
             if (text == null)
                 text = String.Empty;
@@ -26,37 +46,53 @@
             gapBeginOffset = gapEndOffset = 0;
         }
 
-        //public char GetCharAt (int offset) {
-        //    if (offset < gapBeginOffset)
-        //        return buffer [offset];
-        //    else
-        //        return buffer [offset + GapLength];
-        //}
         public char this [int offset] {
             get {
+                // Si el offset est? mas a la izquierda del comienzo del gap,
+                // entonces que devuelva el caracter que marca el offset.
                 if (offset < gapBeginOffset)
                     return buffer [offset];
                 else
+                // Si est? mas a la derecha o en el mismo sitio, hay que saltar
+                // los caracteres in?tiles del gap.
                     return buffer [offset + GapLength];
             }
         }
         
         public string GetText (int offset, int length) {
             int end = offset + length;
+            // Si el final est? mas a la izquierda que el comienzo del gap, el
+            // gap no interfiere, se devuelve esa cadena.
             if (end < gapBeginOffset) {
                 return new string (buffer, offset, length);
             }
+            // Si el compienzo del gac est? mas a la izquierda del offset
+            // marcado, entonces se deben saltar los caracteres inservibles del
+            // gap.
             if (gapBeginOffset < offset) {
                 return new string (buffer, offset + GapLength, length);
             }
 
+            // Si no ocurre ninguna de las anteriores, sea que el final est? mas
+            // a la derecha del gap o bien que el principio del gap est? en la
+            // misma posici?n o m?s a la derecha del offset, entonces.
             StringBuilder buf = new StringBuilder ();
+            // Concatenamos el buffer, el comienzo del offset, y como longitud
+            // pasamos la direcci?n de comienzo del gac menos el desplazamiento.
             buf.Append (buffer, offset, gapBeginOffset - offset);
+            // Concatenamos otra vez el buffer, empezando desde el final de gap
+            // hasta el final del buffer, menos la direcci?n inicial del gap,
+            // para no salirnos del buffer.
             buf.Append (buffer, gapEndOffset, end - gapBeginOffset);
+            /**
+             * Se basa nuevamente en saltar los caracteres inservibles del gap.
+             */
             return buf.ToString ();
         }
 
         public void Insert (int offset, string text) {
+            // Conociendo un aut?mata de pila, entendemos este Insertar y el
+            // Remover. 
             this.Replace (offset, 0, text);
         }
 
@@ -67,43 +103,107 @@
         public void Replace (int offset, int length, string text) {
             if (text == null)
                 text = String.Empty;
+            // Ubicamos el gap, en la posici?n offset + longitud y su longitud
+            // ser? el m?ximo de 0 y la longitud el texto - la longitud que le
+            // pasamos.
             PlaceGap (offset + length, Math.Max (0, text.Length - length));
+            // Copiamos tantos caracteres como el Math.Min de la expresi?n,
+            // desde la posici?n 0 de text hasta la posic?n offset de buffer. 
             text.CopyTo (0, buffer, offset, Math.Min (text.Length, length));
             
+            // Si la longitud del buffer es menor que la que le hemos pasado,
+            // entonces:
             if (text.Length < length) 
+                // Decrementamos el compienzo del offset en tantas unidades como
+                // la longitud que le pasamos menos la longitud del buffer.
                 gapBeginOffset -= length - text.Length;
             else 
+                // Si no si la longitud del buffer es mayor que la longitud que
+                // le pasamos, entonces:
                 if (text.Length > length) {
+                    // Calculamos el incremento de longitudes.
                     int deltaLength = text.Length - length;
+                    // Movemos el comienzo del gap tantas unidades como el
+                    // incremento delta.
                     gapBeginOffset += deltaLength;
+                    // Copiamos desde text[length] a buffer[offset+length],
+                    // tantas unidades como la longitud del buffer, menos la
+                    // longitud que le pasamos.
                     text.CopyTo (length, buffer, offset+length, text.Length - length);
                 }
         }
-
+        
+        /**
+         * Colocaci?n del gap en el buffer.
+         */ 
         void PlaceGap (int offset, int length) {
+            // Guardamos el valor viejo de la longitud del gap.
             int oldLength = GapLength;
+            // Creamos una nueva longitud.
             int newLength = maxGapLength + length;
+            // Calculamos un nuevo final del gap
             int newGapEndOffset = offset + newLength;
+            // Construimos el buffer, sabiendo que la longitud ser? la longitud
+            // del buffer, mas la del gap menos la longitud veja del gap
             char[] newBuffer = new char [buffer.Length + newLength - oldLength];
             
+            // Si la longitud vieja del gap es cero, entonces
             if (oldLength == 0) {
+                // Copiamos el buffer viejo al nuevo, teniendo en cuenta que
+                // empezamos de cero, y que el numero de elementos ser? offset.
                 Array.Copy (buffer, 0, newBuffer, 0, offset);
+                // Volvemos a copiar, saltandonos el gap; esto es, copiamos el
+                // buffer viejo a newBuffer, empezando desde offset, hasta el
+                // nuevo buffer, empezando por el nuevo final del offset y el
+                // numero de elementos ser? la longitud del nuevo buffer menos
+                // la nueva direcci?n final del offset del gap.
                 Array.Copy (buffer, offset, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
             }
             else
+            //Si no si la longitud vieja del gap no es cero, entonces:
+                // Si el offset est? mas a la izquierda que el comienzo de la
+                // direcci?n del gap, entonces:  
                 if (offset < gapBeginOffset) {
+                    // Calculamos el incremento de offsets.
                     int delta = gapBeginOffset - offset;
+                    // Copiamos el buffer viejo al buffer nuevo, teniendo en
+                    // cuenta que empezamos ambos buffers desde cero y que el
+                    // numero de elementos ser? offset (los que no han llegado
+                    // al gap)
                     Array.Copy (buffer, 0, newBuffer, 0, offset);
+                    // Copiamos nuevamente el buffer viejo al buffer nuevo,
+                    // empezando el viejo desde offset, hasta el nuevo final del
+                    // gap, con los elementos delta.
                     Array.Copy (buffer, offset, newBuffer, newGapEndOffset, delta);
+                    // Finalmente copiamos el buffer viejo al nuevo, teniendo en
+                    // cuenta que empezamos por la posicion del final del gap, y
+                    // en el otro lado con la nueva posicion del gap (final
+                    // ?????) + el numero de elementos, y tantos elementos como
+                    // longitud del buffer - longitud del gap.
                     Array.Copy (buffer, gapEndOffset, newBuffer, newGapEndOffset + delta, buffer.Length - gapEndOffset);
                     
                 }
+                // Si no, el offset est? mas a la derecha o en la misma posici?n
+                // que el offset de comienzo del gap.
                 else {
+                    // Calculamos el numero de elementos delta.
                     int delta = offset - gapBeginOffset;
+                    // Copiamos el buffer viejo en el buffer nuevo, desde la
+                    // posici?n inicial y el numero de elementos de
+                    // gapBeginOffset.
                     Array.Copy (buffer, 0, newBuffer, 0 , gapBeginOffset);
+                    // Copiamos las posiciones del gap, esto es copiamos el
+                    // buffer viejo en el buffer nuevo, empezando por el final
+                    // del gap, y desde el comienzo del gap; respectivamente con
+                    // tantos elementos como delta.
                     Array.Copy (buffer, gapEndOffset, newBuffer, gapBeginOffset, delta);
+                    // Copiamos el resto del buffer, del viejo al nuevo;
+                    // empezando por el fin de gap + delta y el nuevo final del
+                    // gap, y tantos elementos como la nueva longitud del buffer
+                    // menos el desplazamiento final del gap.
                     Array.Copy (buffer, gapEndOffset + delta, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
                 }
+            // Actualizamos los valores.
             buffer = newBuffer;
             gapBeginOffset = offset;
             gapEndOffset = newGapEndOffset;

Modified: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs	2005-02-15 21:26:00 UTC (rev 328)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs	2005-02-15 22:15:07 UTC (rev 329)
@@ -1,13 +1,48 @@
+//
+// Vim.Components.VimBuffer.Model.VimBufferStrategy.IVimBufferStrategy.cs :  
+//
+// Author:
+//      N?stor Salceda Alonso (wizito at gentelibre.org)
+// (C) 2005
 
 namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
+    /**
+     *  Basic strategy interface to operate with buffer implementations.
+     */
     public interface IVimBufferStrategy {
+        /**
+         * Returns length of the buffer.
+         */
         int Length {get;}
+
+        /**
+         * Returns char specified at offset.
+         */
         char this [int offset] {get;}
-        
+       
+        /**
+         * Insert text in offset position.
+         */
         void Insert (int offset, string text);
+
+        /**
+         * Remove length characters, to offset position.
+         */
         void Remove (int offset, int length);
+
+        /**
+         * Replace position offset and length to text.
+         */
         void Replace (int offset,int length, string text);
+
+        /**
+         * Get buffer or a buffer subset from offset & length.
+         */
         string GetText (int offset, int length);
+
+        /**
+         * Sets buffer content.
+         */
         void SetContent (string text);
     }
 }

Modified: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs	2005-02-15 21:26:00 UTC (rev 328)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs	2005-02-15 22:15:07 UTC (rev 329)
@@ -1,3 +1,11 @@
+//
+// Vim.Components.VimBuffer.Model.VimBufferStrategy.StringVimBufferStrategy.cs :
+//      A implementation of IVimBufferStrategy with a string.
+//
+// Author:
+//      N?stor Salceda Alonso (wizito at gentelibre.org)
+// (C) 2005
+// 
 using System;
 
 namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
@@ -12,11 +20,16 @@
         }
 
         public char this [int offset] {
-            get {return text[offset];}
+            get {
+                if (offset == text.Length)
+                    return '\0'; 
+                return text[offset];
+            }
         }
 
         public void Insert (int offset, string text) {
-            this.text = this.text.Insert (offset, text);
+            if (text != null) 
+                this.text = this.text.Insert (offset, text);
         }
 
         public void Remove (int offset, int length) {
@@ -29,6 +42,8 @@
         }
 
         public string GetText (int offset, int length) {
+            if (length == 0)
+                return String.Empty;
             return text.Substring (offset, Math.Min (length, text.Length - offset));
         }
 



From rubiojr at sheep.berlios.de  Tue Feb 15 23:19:09 2005
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Tue, 15 Feb 2005 23:19:09 +0100
Subject: [Mspace-checkins] r330 - in mvim/trunk/src/Vim.Components.Commands: . Commands
Message-ID: <200502152219.j1FMJ99F007692@sheep.berlios.de>

Author: rubiojr
Date: 2005-02-15 23:19:07 +0100 (Tue, 15 Feb 2005)
New Revision: 330

Modified:
   mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs
   mvim/trunk/src/Vim.Components.Commands/ICommand.cs
Log:
Fixed ICommand interface. Made it more generic

Modified: mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs	2005-02-15 22:15:07 UTC (rev 329)
+++ mvim/trunk/src/Vim.Components.Commands/Commands/TestCommand.cs	2005-02-15 22:19:07 UTC (rev 330)
@@ -28,7 +28,7 @@
 			}
 		}
 		
-		public ArrayList Aliases {
+		public ICollection Aliases {
 			get {
 				return aliases;
 			}

Modified: mvim/trunk/src/Vim.Components.Commands/ICommand.cs
===================================================================
--- mvim/trunk/src/Vim.Components.Commands/ICommand.cs	2005-02-15 22:15:07 UTC (rev 329)
+++ mvim/trunk/src/Vim.Components.Commands/ICommand.cs	2005-02-15 22:19:07 UTC (rev 330)
@@ -18,7 +18,7 @@
 	{
 		void Execute (object[] parameters);
 		
-		ArrayList Aliases { get; }
+		ICollection Aliases { get; }
 		string Name { get; }
 	}
 }



From rubiojr at sheep.berlios.de  Tue Feb 15 23:21:41 2005
From: rubiojr at sheep.berlios.de (Sergio Rubio at BerliOS)
Date: Tue, 15 Feb 2005 23:21:41 +0100
Subject: [Mspace-checkins] r331 - mvim/trunk
Message-ID: <200502152221.j1FMLfj9008126@sheep.berlios.de>

Author: rubiojr
Date: 2005-02-15 23:21:39 +0100 (Tue, 15 Feb 2005)
New Revision: 331

Modified:
   mvim/trunk/AUTHORS
Log:
Added my name

Modified: mvim/trunk/AUTHORS
===================================================================
--- mvim/trunk/AUTHORS	2005-02-15 22:19:07 UTC (rev 330)
+++ mvim/trunk/AUTHORS	2005-02-15 22:21:39 UTC (rev 331)
@@ -1 +1,2 @@
 N?stor Salceda Alonso <wizito at gentelibre.org>
+Sergio Rubio <sergio.rubio at hispalinux.es>



From nestor at sheep.berlios.de  Tue Feb 15 23:39:14 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 23:39:14 +0100
Subject: [Mspace-checkins] r332 - in mvim/trunk/src: . Vim.Components.BufferedVimControl Vim.Components.VimBuffer Vim.Components.VimBuffer/Model/VimBufferStrategy Vim.Components.VimControl Vim.Components.VimEntry
Message-ID: <200502152239.j1FMdElq009017@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 23:39:12 +0100 (Tue, 15 Feb 2005)
New Revision: 332

Added:
   mvim/trunk/src/Vim.Components.VimBuffer/GapVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/IVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/StringVimBufferStrategy.cs
Removed:
   mvim/trunk/src/Vim.Components.BufferedVimControl/Controller/
   mvim/trunk/src/Vim.Components.BufferedVimControl/Model/
   mvim/trunk/src/Vim.Components.BufferedVimControl/View/
   mvim/trunk/src/Vim.Components.VimBuffer/Controller/
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs
   mvim/trunk/src/Vim.Components.VimBuffer/View/
   mvim/trunk/src/Vim.Components.VimControl/Controller/
   mvim/trunk/src/Vim.Components.VimControl/Model/
   mvim/trunk/src/Vim.Components.VimControl/View/
   mvim/trunk/src/Vim.Components.VimEntry/Controller/
   mvim/trunk/src/Vim.Components.VimEntry/Model/
   mvim/trunk/src/Vim.Components.VimEntry/View/
Modified:
   mvim/trunk/src/Makefile.am
Log:
Reordered Svn-Tree

Removed namespaces *.(Model |View | Controller)


Modified: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-15 22:21:39 UTC (rev 331)
+++ mvim/trunk/src/Makefile.am	2005-02-15 22:39:12 UTC (rev 332)
@@ -15,22 +15,9 @@
 RESOURCES_REFERENCES_BUILD=$(foreach res, $(RESOURCES_REFERENCES),$(addprefix -resource:,$(res)),$(notdir $(res)))
 
 SOURCES_REFERENCES=\
-Vim.Components.BufferedVimControl/Model/*.cs\
-Vim.Components.BufferedVimControl/Controller/*.cs\
-Vim.Components.BufferedVimControl/View/*.cs\
 Vim.Components.BufferedVimControl/*.cs\
-Vim.Components.VimControl/Model/*.cs\
-Vim.Components.VimControl/Controller/*.cs\
-Vim.Components.VimControl/View/*.cs\
 Vim.Components.VimControl/*.cs\
-Vim.Components.VimBuffer/Model/*.cs\
-Vim.Components.VimBuffer/Model/VimBufferStrategy/*.cs\
-Vim.Components.VimBuffer/Controller/*.cs\
-Vim.Components.VimBuffer/View/*.cs\
 Vim.Components.VimBuffer/*.cs\
-Vim.Components.VimEntry/Model/*.cs\
-Vim.Components.VimEntry/Controller/*.cs\
-Vim.Components.VimEntry/View/*.cs\
 Vim.Components.VimEntry/*.cs\
 Vim.Components/*.cs\
 Vim.Components.Gtk/*.cs\

Copied: mvim/trunk/src/Vim.Components.VimBuffer/GapVimBufferStrategy.cs (from rev 329, mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs)
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs	2005-02-15 22:15:07 UTC (rev 329)
+++ mvim/trunk/src/Vim.Components.VimBuffer/GapVimBufferStrategy.cs	2005-02-15 22:39:12 UTC (rev 332)
@@ -0,0 +1,213 @@
+//
+// Vim.Components.VimBuffer.Model.VimBufferStrategy.IVimBufferStrategy.cs :
+//      An implementation of a IVimBufferStrategy with a gap buffer.
+//
+// Author:
+//      N?stor Salceda Alonso (wizito at gentelibre.org)
+// (C) 2005
+
+using System;
+using System.Text;
+
+namespace Vim.Components.VimBuffer {
+    public class GapTextBufferStrategy : IVimBufferStrategy {
+        private char[] buffer = new char [0];
+
+        int gapBeginOffset = 0;
+        int gapEndOffset = 0;
+
+        const int minGapLength = 32;
+        const int maxGapLength = 256;
+
+        /**
+         * Returns Gap's length.
+         */
+        int GapLength {
+            get {return gapEndOffset - gapBeginOffset;}
+        }
+        
+        /**
+         * Returns buffer's length.  
+         * Note: The length is total length minus gap's length, because gap must
+         * be hidden.  Count all char in buffer.
+         */
+        public int Length {
+            get {return buffer.Length - GapLength;}
+        }
+        
+        /**
+         * Sets buffer's content, and reset gap position. Later gap will be
+         * placed.
+         */
+        public void SetContent (string text) {
+            if (text == null)
+                text = String.Empty;
+            buffer = text.ToCharArray ();
+            gapBeginOffset = gapEndOffset = 0;
+        }
+
+        public char this [int offset] {
+            get {
+                // Si el offset est? mas a la izquierda del comienzo del gap,
+                // entonces que devuelva el caracter que marca el offset.
+                if (offset < gapBeginOffset)
+                    return buffer [offset];
+                else
+                // Si est? mas a la derecha o en el mismo sitio, hay que saltar
+                // los caracteres in?tiles del gap.
+                    return buffer [offset + GapLength];
+            }
+        }
+        
+        public string GetText (int offset, int length) {
+            int end = offset + length;
+            // Si el final est? mas a la izquierda que el comienzo del gap, el
+            // gap no interfiere, se devuelve esa cadena.
+            if (end < gapBeginOffset) {
+                return new string (buffer, offset, length);
+            }
+            // Si el compienzo del gac est? mas a la izquierda del offset
+            // marcado, entonces se deben saltar los caracteres inservibles del
+            // gap.
+            if (gapBeginOffset < offset) {
+                return new string (buffer, offset + GapLength, length);
+            }
+
+            // Si no ocurre ninguna de las anteriores, sea que el final est? mas
+            // a la derecha del gap o bien que el principio del gap est? en la
+            // misma posici?n o m?s a la derecha del offset, entonces.
+            StringBuilder buf = new StringBuilder ();
+            // Concatenamos el buffer, el comienzo del offset, y como longitud
+            // pasamos la direcci?n de comienzo del gac menos el desplazamiento.
+            buf.Append (buffer, offset, gapBeginOffset - offset);
+            // Concatenamos otra vez el buffer, empezando desde el final de gap
+            // hasta el final del buffer, menos la direcci?n inicial del gap,
+            // para no salirnos del buffer.
+            buf.Append (buffer, gapEndOffset, end - gapBeginOffset);
+            /**
+             * Se basa nuevamente en saltar los caracteres inservibles del gap.
+             */
+            return buf.ToString ();
+        }
+
+        public void Insert (int offset, string text) {
+            // Conociendo un aut?mata de pila, entendemos este Insertar y el
+            // Remover. 
+            this.Replace (offset, 0, text);
+        }
+
+        public void Remove (int offset, int length) {
+            this.Replace (offset, length, String.Empty);
+        }
+
+        public void Replace (int offset, int length, string text) {
+            if (text == null)
+                text = String.Empty;
+            // Ubicamos el gap, en la posici?n offset + longitud y su longitud
+            // ser? el m?ximo de 0 y la longitud el texto - la longitud que le
+            // pasamos.
+            PlaceGap (offset + length, Math.Max (0, text.Length - length));
+            // Copiamos tantos caracteres como el Math.Min de la expresi?n,
+            // desde la posici?n 0 de text hasta la posic?n offset de buffer. 
+            text.CopyTo (0, buffer, offset, Math.Min (text.Length, length));
+            
+            // Si la longitud del buffer es menor que la que le hemos pasado,
+            // entonces:
+            if (text.Length < length) 
+                // Decrementamos el compienzo del offset en tantas unidades como
+                // la longitud que le pasamos menos la longitud del buffer.
+                gapBeginOffset -= length - text.Length;
+            else 
+                // Si no si la longitud del buffer es mayor que la longitud que
+                // le pasamos, entonces:
+                if (text.Length > length) {
+                    // Calculamos el incremento de longitudes.
+                    int deltaLength = text.Length - length;
+                    // Movemos el comienzo del gap tantas unidades como el
+                    // incremento delta.
+                    gapBeginOffset += deltaLength;
+                    // Copiamos desde text[length] a buffer[offset+length],
+                    // tantas unidades como la longitud del buffer, menos la
+                    // longitud que le pasamos.
+                    text.CopyTo (length, buffer, offset+length, text.Length - length);
+                }
+        }
+        
+        /**
+         * Colocaci?n del gap en el buffer.
+         */ 
+        void PlaceGap (int offset, int length) {
+            // Guardamos el valor viejo de la longitud del gap.
+            int oldLength = GapLength;
+            // Creamos una nueva longitud.
+            int newLength = maxGapLength + length;
+            // Calculamos un nuevo final del gap
+            int newGapEndOffset = offset + newLength;
+            // Construimos el buffer, sabiendo que la longitud ser? la longitud
+            // del buffer, mas la del gap menos la longitud veja del gap
+            char[] newBuffer = new char [buffer.Length + newLength - oldLength];
+            
+            // Si la longitud vieja del gap es cero, entonces
+            if (oldLength == 0) {
+                // Copiamos el buffer viejo al nuevo, teniendo en cuenta que
+                // empezamos de cero, y que el numero de elementos ser? offset.
+                Array.Copy (buffer, 0, newBuffer, 0, offset);
+                // Volvemos a copiar, saltandonos el gap; esto es, copiamos el
+                // buffer viejo a newBuffer, empezando desde offset, hasta el
+                // nuevo buffer, empezando por el nuevo final del offset y el
+                // numero de elementos ser? la longitud del nuevo buffer menos
+                // la nueva direcci?n final del offset del gap.
+                Array.Copy (buffer, offset, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
+            }
+            else
+            //Si no si la longitud vieja del gap no es cero, entonces:
+                // Si el offset est? mas a la izquierda que el comienzo de la
+                // direcci?n del gap, entonces:  
+                if (offset < gapBeginOffset) {
+                    // Calculamos el incremento de offsets.
+                    int delta = gapBeginOffset - offset;
+                    // Copiamos el buffer viejo al buffer nuevo, teniendo en
+                    // cuenta que empezamos ambos buffers desde cero y que el
+                    // numero de elementos ser? offset (los que no han llegado
+                    // al gap)
+                    Array.Copy (buffer, 0, newBuffer, 0, offset);
+                    // Copiamos nuevamente el buffer viejo al buffer nuevo,
+                    // empezando el viejo desde offset, hasta el nuevo final del
+                    // gap, con los elementos delta.
+                    Array.Copy (buffer, offset, newBuffer, newGapEndOffset, delta);
+                    // Finalmente copiamos el buffer viejo al nuevo, teniendo en
+                    // cuenta que empezamos por la posicion del final del gap, y
+                    // en el otro lado con la nueva posicion del gap (final
+                    // ?????) + el numero de elementos, y tantos elementos como
+                    // longitud del buffer - longitud del gap.
+                    Array.Copy (buffer, gapEndOffset, newBuffer, newGapEndOffset + delta, buffer.Length - gapEndOffset);
+                    
+                }
+                // Si no, el offset est? mas a la derecha o en la misma posici?n
+                // que el offset de comienzo del gap.
+                else {
+                    // Calculamos el numero de elementos delta.
+                    int delta = offset - gapBeginOffset;
+                    // Copiamos el buffer viejo en el buffer nuevo, desde la
+                    // posici?n inicial y el numero de elementos de
+                    // gapBeginOffset.
+                    Array.Copy (buffer, 0, newBuffer, 0 , gapBeginOffset);
+                    // Copiamos las posiciones del gap, esto es copiamos el
+                    // buffer viejo en el buffer nuevo, empezando por el final
+                    // del gap, y desde el comienzo del gap; respectivamente con
+                    // tantos elementos como delta.
+                    Array.Copy (buffer, gapEndOffset, newBuffer, gapBeginOffset, delta);
+                    // Copiamos el resto del buffer, del viejo al nuevo;
+                    // empezando por el fin de gap + delta y el nuevo final del
+                    // gap, y tantos elementos como la nueva longitud del buffer
+                    // menos el desplazamiento final del gap.
+                    Array.Copy (buffer, gapEndOffset + delta, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
+                }
+            // Actualizamos los valores.
+            buffer = newBuffer;
+            gapBeginOffset = offset;
+            gapEndOffset = newGapEndOffset;
+        }
+
+    }
+}

Copied: mvim/trunk/src/Vim.Components.VimBuffer/IVimBufferStrategy.cs (from rev 329, mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs)
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs	2005-02-15 22:15:07 UTC (rev 329)
+++ mvim/trunk/src/Vim.Components.VimBuffer/IVimBufferStrategy.cs	2005-02-15 22:39:12 UTC (rev 332)
@@ -0,0 +1,48 @@
+//
+// Vim.Components.VimBuffer.Model.VimBufferStrategy.IVimBufferStrategy.cs :  
+//
+// Author:
+//      N?stor Salceda Alonso (wizito at gentelibre.org)
+// (C) 2005
+
+namespace Vim.Components.VimBuffer {
+    /**
+     *  Basic strategy interface to operate with buffer implementations.
+     */
+    public interface IVimBufferStrategy {
+        /**
+         * Returns length of the buffer.
+         */
+        int Length {get;}
+
+        /**
+         * Returns char specified at offset.
+         */
+        char this [int offset] {get;}
+       
+        /**
+         * Insert text in offset position.
+         */
+        void Insert (int offset, string text);
+
+        /**
+         * Remove length characters, to offset position.
+         */
+        void Remove (int offset, int length);
+
+        /**
+         * Replace position offset and length to text.
+         */
+        void Replace (int offset,int length, string text);
+
+        /**
+         * Get buffer or a buffer subset from offset & length.
+         */
+        string GetText (int offset, int length);
+
+        /**
+         * Sets buffer content.
+         */
+        void SetContent (string text);
+    }
+}

Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs	2005-02-15 22:21:39 UTC (rev 331)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/GapVimBufferStrategy.cs	2005-02-15 22:39:12 UTC (rev 332)
@@ -1,213 +0,0 @@
-//
-// Vim.Components.VimBuffer.Model.VimBufferStrategy.IVimBufferStrategy.cs :
-//      An implementation of a IVimBufferStrategy with a gap buffer.
-//
-// Author:
-//      N?stor Salceda Alonso (wizito at gentelibre.org)
-// (C) 2005
-
-using System;
-using System.Text;
-
-namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
-    public class GapTextBufferStrategy : IVimBufferStrategy {
-        private char[] buffer = new char [0];
-
-        int gapBeginOffset = 0;
-        int gapEndOffset = 0;
-
-        const int minGapLength = 32;
-        const int maxGapLength = 256;
-
-        /**
-         * Returns Gap's length.
-         */
-        int GapLength {
-            get {return gapEndOffset - gapBeginOffset;}
-        }
-        
-        /**
-         * Returns buffer's length.  
-         * Note: The length is total length minus gap's length, because gap must
-         * be hidden.  Count all char in buffer.
-         */
-        public int Length {
-            get {return buffer.Length - GapLength;}
-        }
-        
-        /**
-         * Sets buffer's content, and reset gap position. Later gap will be
-         * placed.
-         */
-        public void SetContent (string text) {
-            if (text == null)
-                text = String.Empty;
-            buffer = text.ToCharArray ();
-            gapBeginOffset = gapEndOffset = 0;
-        }
-
-        public char this [int offset] {
-            get {
-                // Si el offset est? mas a la izquierda del comienzo del gap,
-                // entonces que devuelva el caracter que marca el offset.
-                if (offset < gapBeginOffset)
-                    return buffer [offset];
-                else
-                // Si est? mas a la derecha o en el mismo sitio, hay que saltar
-                // los caracteres in?tiles del gap.
-                    return buffer [offset + GapLength];
-            }
-        }
-        
-        public string GetText (int offset, int length) {
-            int end = offset + length;
-            // Si el final est? mas a la izquierda que el comienzo del gap, el
-            // gap no interfiere, se devuelve esa cadena.
-            if (end < gapBeginOffset) {
-                return new string (buffer, offset, length);
-            }
-            // Si el compienzo del gac est? mas a la izquierda del offset
-            // marcado, entonces se deben saltar los caracteres inservibles del
-            // gap.
-            if (gapBeginOffset < offset) {
-                return new string (buffer, offset + GapLength, length);
-            }
-
-            // Si no ocurre ninguna de las anteriores, sea que el final est? mas
-            // a la derecha del gap o bien que el principio del gap est? en la
-            // misma posici?n o m?s a la derecha del offset, entonces.
-            StringBuilder buf = new StringBuilder ();
-            // Concatenamos el buffer, el comienzo del offset, y como longitud
-            // pasamos la direcci?n de comienzo del gac menos el desplazamiento.
-            buf.Append (buffer, offset, gapBeginOffset - offset);
-            // Concatenamos otra vez el buffer, empezando desde el final de gap
-            // hasta el final del buffer, menos la direcci?n inicial del gap,
-            // para no salirnos del buffer.
-            buf.Append (buffer, gapEndOffset, end - gapBeginOffset);
-            /**
-             * Se basa nuevamente en saltar los caracteres inservibles del gap.
-             */
-            return buf.ToString ();
-        }
-
-        public void Insert (int offset, string text) {
-            // Conociendo un aut?mata de pila, entendemos este Insertar y el
-            // Remover. 
-            this.Replace (offset, 0, text);
-        }
-
-        public void Remove (int offset, int length) {
-            this.Replace (offset, length, String.Empty);
-        }
-
-        public void Replace (int offset, int length, string text) {
-            if (text == null)
-                text = String.Empty;
-            // Ubicamos el gap, en la posici?n offset + longitud y su longitud
-            // ser? el m?ximo de 0 y la longitud el texto - la longitud que le
-            // pasamos.
-            PlaceGap (offset + length, Math.Max (0, text.Length - length));
-            // Copiamos tantos caracteres como el Math.Min de la expresi?n,
-            // desde la posici?n 0 de text hasta la posic?n offset de buffer. 
-            text.CopyTo (0, buffer, offset, Math.Min (text.Length, length));
-            
-            // Si la longitud del buffer es menor que la que le hemos pasado,
-            // entonces:
-            if (text.Length < length) 
-                // Decrementamos el compienzo del offset en tantas unidades como
-                // la longitud que le pasamos menos la longitud del buffer.
-                gapBeginOffset -= length - text.Length;
-            else 
-                // Si no si la longitud del buffer es mayor que la longitud que
-                // le pasamos, entonces:
-                if (text.Length > length) {
-                    // Calculamos el incremento de longitudes.
-                    int deltaLength = text.Length - length;
-                    // Movemos el comienzo del gap tantas unidades como el
-                    // incremento delta.
-                    gapBeginOffset += deltaLength;
-                    // Copiamos desde text[length] a buffer[offset+length],
-                    // tantas unidades como la longitud del buffer, menos la
-                    // longitud que le pasamos.
-                    text.CopyTo (length, buffer, offset+length, text.Length - length);
-                }
-        }
-        
-        /**
-         * Colocaci?n del gap en el buffer.
-         */ 
-        void PlaceGap (int offset, int length) {
-            // Guardamos el valor viejo de la longitud del gap.
-            int oldLength = GapLength;
-            // Creamos una nueva longitud.
-            int newLength = maxGapLength + length;
-            // Calculamos un nuevo final del gap
-            int newGapEndOffset = offset + newLength;
-            // Construimos el buffer, sabiendo que la longitud ser? la longitud
-            // del buffer, mas la del gap menos la longitud veja del gap
-            char[] newBuffer = new char [buffer.Length + newLength - oldLength];
-            
-            // Si la longitud vieja del gap es cero, entonces
-            if (oldLength == 0) {
-                // Copiamos el buffer viejo al nuevo, teniendo en cuenta que
-                // empezamos de cero, y que el numero de elementos ser? offset.
-                Array.Copy (buffer, 0, newBuffer, 0, offset);
-                // Volvemos a copiar, saltandonos el gap; esto es, copiamos el
-                // buffer viejo a newBuffer, empezando desde offset, hasta el
-                // nuevo buffer, empezando por el nuevo final del offset y el
-                // numero de elementos ser? la longitud del nuevo buffer menos
-                // la nueva direcci?n final del offset del gap.
-                Array.Copy (buffer, offset, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
-            }
-            else
-            //Si no si la longitud vieja del gap no es cero, entonces:
-                // Si el offset est? mas a la izquierda que el comienzo de la
-                // direcci?n del gap, entonces:  
-                if (offset < gapBeginOffset) {
-                    // Calculamos el incremento de offsets.
-                    int delta = gapBeginOffset - offset;
-                    // Copiamos el buffer viejo al buffer nuevo, teniendo en
-                    // cuenta que empezamos ambos buffers desde cero y que el
-                    // numero de elementos ser? offset (los que no han llegado
-                    // al gap)
-                    Array.Copy (buffer, 0, newBuffer, 0, offset);
-                    // Copiamos nuevamente el buffer viejo al buffer nuevo,
-                    // empezando el viejo desde offset, hasta el nuevo final del
-                    // gap, con los elementos delta.
-                    Array.Copy (buffer, offset, newBuffer, newGapEndOffset, delta);
-                    // Finalmente copiamos el buffer viejo al nuevo, teniendo en
-                    // cuenta que empezamos por la posicion del final del gap, y
-                    // en el otro lado con la nueva posicion del gap (final
-                    // ?????) + el numero de elementos, y tantos elementos como
-                    // longitud del buffer - longitud del gap.
-                    Array.Copy (buffer, gapEndOffset, newBuffer, newGapEndOffset + delta, buffer.Length - gapEndOffset);
-                    
-                }
-                // Si no, el offset est? mas a la derecha o en la misma posici?n
-                // que el offset de comienzo del gap.
-                else {
-                    // Calculamos el numero de elementos delta.
-                    int delta = offset - gapBeginOffset;
-                    // Copiamos el buffer viejo en el buffer nuevo, desde la
-                    // posici?n inicial y el numero de elementos de
-                    // gapBeginOffset.
-                    Array.Copy (buffer, 0, newBuffer, 0 , gapBeginOffset);
-                    // Copiamos las posiciones del gap, esto es copiamos el
-                    // buffer viejo en el buffer nuevo, empezando por el final
-                    // del gap, y desde el comienzo del gap; respectivamente con
-                    // tantos elementos como delta.
-                    Array.Copy (buffer, gapEndOffset, newBuffer, gapBeginOffset, delta);
-                    // Copiamos el resto del buffer, del viejo al nuevo;
-                    // empezando por el fin de gap + delta y el nuevo final del
-                    // gap, y tantos elementos como la nueva longitud del buffer
-                    // menos el desplazamiento final del gap.
-                    Array.Copy (buffer, gapEndOffset + delta, newBuffer, newGapEndOffset, newBuffer.Length - newGapEndOffset);
-                }
-            // Actualizamos los valores.
-            buffer = newBuffer;
-            gapBeginOffset = offset;
-            gapEndOffset = newGapEndOffset;
-        }
-
-    }
-}

Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs	2005-02-15 22:21:39 UTC (rev 331)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/IVimBufferStrategy.cs	2005-02-15 22:39:12 UTC (rev 332)
@@ -1,48 +0,0 @@
-//
-// Vim.Components.VimBuffer.Model.VimBufferStrategy.IVimBufferStrategy.cs :  
-//
-// Author:
-//      N?stor Salceda Alonso (wizito at gentelibre.org)
-// (C) 2005
-
-namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
-    /**
-     *  Basic strategy interface to operate with buffer implementations.
-     */
-    public interface IVimBufferStrategy {
-        /**
-         * Returns length of the buffer.
-         */
-        int Length {get;}
-
-        /**
-         * Returns char specified at offset.
-         */
-        char this [int offset] {get;}
-       
-        /**
-         * Insert text in offset position.
-         */
-        void Insert (int offset, string text);
-
-        /**
-         * Remove length characters, to offset position.
-         */
-        void Remove (int offset, int length);
-
-        /**
-         * Replace position offset and length to text.
-         */
-        void Replace (int offset,int length, string text);
-
-        /**
-         * Get buffer or a buffer subset from offset & length.
-         */
-        string GetText (int offset, int length);
-
-        /**
-         * Sets buffer content.
-         */
-        void SetContent (string text);
-    }
-}

Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs	2005-02-15 22:21:39 UTC (rev 331)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs	2005-02-15 22:39:12 UTC (rev 332)
@@ -1,54 +0,0 @@
-//
-// Vim.Components.VimBuffer.Model.VimBufferStrategy.StringVimBufferStrategy.cs :
-//      A implementation of IVimBufferStrategy with a string.
-//
-// Author:
-//      N?stor Salceda Alonso (wizito at gentelibre.org)
-// (C) 2005
-// 
-using System;
-
-namespace Vim.Components.VimBuffer.Model.VimBufferStrategy {
-    public class StringVimBufferStrategy : IVimBufferStrategy {
-        private string text;
-   
-        public StringVimBufferStrategy () {
-        }
-        
-        public int Length {
-            get {return text.Length;}
-        }
-
-        public char this [int offset] {
-            get {
-                if (offset == text.Length)
-                    return '\0'; 
-                return text[offset];
-            }
-        }
-
-        public void Insert (int offset, string text) {
-            if (text != null) 
-                this.text = this.text.Insert (offset, text);
-        }
-
-        public void Remove (int offset, int length) {
-            text = text.Remove (offset, length);
-        }
-
-        public void Replace (int offset, int length, string text) {
-            Remove (offset, length);
-            Insert (offset, text);
-        }
-
-        public string GetText (int offset, int length) {
-            if (length == 0)
-                return String.Empty;
-            return text.Substring (offset, Math.Min (length, text.Length - offset));
-        }
-
-        public void SetContent (string text) {
-            this.text = text;
-        }
-    }
-}

Copied: mvim/trunk/src/Vim.Components.VimBuffer/StringVimBufferStrategy.cs (from rev 329, mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs)
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/StringVimBufferStrategy.cs	2005-02-15 22:15:07 UTC (rev 329)
+++ mvim/trunk/src/Vim.Components.VimBuffer/StringVimBufferStrategy.cs	2005-02-15 22:39:12 UTC (rev 332)
@@ -0,0 +1,54 @@
+//
+// Vim.Components.VimBuffer.Model.VimBufferStrategy.StringVimBufferStrategy.cs :
+//      A implementation of IVimBufferStrategy with a string.
+//
+// Author:
+//      N?stor Salceda Alonso (wizito at gentelibre.org)
+// (C) 2005
+// 
+using System;
+
+namespace Vim.Components.VimBuffer {
+    public class StringVimBufferStrategy : IVimBufferStrategy {
+        private string text;
+   
+        public StringVimBufferStrategy () {
+        }
+        
+        public int Length {
+            get {return text.Length;}
+        }
+
+        public char this [int offset] {
+            get {
+                if (offset == text.Length)
+                    return '\0'; 
+                return text[offset];
+            }
+        }
+
+        public void Insert (int offset, string text) {
+            if (text != null) 
+                this.text = this.text.Insert (offset, text);
+        }
+
+        public void Remove (int offset, int length) {
+            text = text.Remove (offset, length);
+        }
+
+        public void Replace (int offset, int length, string text) {
+            Remove (offset, length);
+            Insert (offset, text);
+        }
+
+        public string GetText (int offset, int length) {
+            if (length == 0)
+                return String.Empty;
+            return text.Substring (offset, Math.Min (length, text.Length - offset));
+        }
+
+        public void SetContent (string text) {
+            this.text = text;
+        }
+    }
+}



From nestor at sheep.berlios.de  Tue Feb 15 23:40:28 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 23:40:28 +0100
Subject: [Mspace-checkins] r333 - in mvim/trunk/src/Vim.Components.VimBuffer: . Model
Message-ID: <200502152240.j1FMeSfN009081@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 23:40:28 +0100 (Tue, 15 Feb 2005)
New Revision: 333

Added:
   mvim/trunk/src/Vim.Components.VimBuffer/IVimBuffer.cs
   mvim/trunk/src/Vim.Components.VimBuffer/VimBuffer.cs
Removed:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBuffer.cs
Log:
I forget one entry :D


Copied: mvim/trunk/src/Vim.Components.VimBuffer/IVimBuffer.cs (from rev 326, mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs)

Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs	2005-02-15 22:39:12 UTC (rev 332)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/IVimBuffer.cs	2005-02-15 22:40:28 UTC (rev 333)
@@ -1,18 +0,0 @@
-//
-// Vim.Components.VimBuffer.Model.IVimBuffer.cs :  
-//
-// Author:
-//      N?stor Salceda Alonso (wizito at gentelibre.org)
-// (C) 2005
-
-namespace Vim.Components.VimBuffer.Model {
-    //
-    //<summary>
-    //  We try use same Buffer as SharpDevelop do.
-    //  Try use a Gap Buffer.
-    //</summary>
-    //
-    public interface IVimBuffer {
-         
-    }
-}

Deleted: mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBuffer.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBuffer.cs	2005-02-15 22:39:12 UTC (rev 332)
+++ mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBuffer.cs	2005-02-15 22:40:28 UTC (rev 333)
@@ -1,11 +0,0 @@
-namespace Vim.Components.VimBuffer.Model {
-
-    public class VimBuffer : IVimBuffer {
-        private string text;
-
-        public string Text {
-            get {return text;}
-            set {text = value;}
-        }
-    }
-}

Copied: mvim/trunk/src/Vim.Components.VimBuffer/VimBuffer.cs (from rev 326, mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBuffer.cs)



From nestor at sheep.berlios.de  Tue Feb 15 23:48:42 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 23:48:42 +0100
Subject: [Mspace-checkins] r334 - in mvim/trunk/src: . Vim.Components.VimBuffer Vim.Components.VimBuffer/Model
Message-ID: <200502152248.j1FMmgO4009699@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 23:48:41 +0100 (Tue, 15 Feb 2005)
New Revision: 334

Added:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/
   mvim/trunk/src/Vim.Components.VimBuffer/Model/VimBufferStrategy/
Removed:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/
   mvim/trunk/src/lib/
   mvim/trunk/src/resources/
Modified:
   mvim/trunk/src/Makefile.am
   mvim/trunk/src/Vim.Components.VimBuffer/IVimBuffer.cs
   mvim/trunk/src/Vim.Components.VimBuffer/VimBuffer.cs
   mvim/trunk/src/log4net.dll
Log:
Ended tree.


Modified: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-15 22:40:28 UTC (rev 333)
+++ mvim/trunk/src/Makefile.am	2005-02-15 22:48:41 UTC (rev 334)
@@ -5,7 +5,7 @@
 
 PKG_REFERENCES_BUILD=$(addprefix -pkg:,$(PKG_REFERENCES))
 
-LIB_REFERENCES = lib/log4net.dll 
+LIB_REFERENCES = log4net.dll 
 
 LIB_REFERENCES_BUILD=$(addprefix -reference:,$(LIB_REFERENCES))
 

Modified: mvim/trunk/src/Vim.Components.VimBuffer/IVimBuffer.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/IVimBuffer.cs	2005-02-15 22:40:28 UTC (rev 333)
+++ mvim/trunk/src/Vim.Components.VimBuffer/IVimBuffer.cs	2005-02-15 22:48:41 UTC (rev 334)
@@ -5,7 +5,7 @@
 //      N?stor Salceda Alonso (wizito at gentelibre.org)
 // (C) 2005
 
-namespace Vim.Components.VimBuffer.Model {
+namespace Vim.Components.VimBuffer {
     //
     //<summary>
     //  We try use same Buffer as SharpDevelop do.

Modified: mvim/trunk/src/Vim.Components.VimBuffer/VimBuffer.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/VimBuffer.cs	2005-02-15 22:40:28 UTC (rev 333)
+++ mvim/trunk/src/Vim.Components.VimBuffer/VimBuffer.cs	2005-02-15 22:48:41 UTC (rev 334)
@@ -1,4 +1,4 @@
-namespace Vim.Components.VimBuffer.Model {
+namespace Vim.Components.VimBuffer {
 
     public class VimBuffer : IVimBuffer {
         private string text;

Modified: mvim/trunk/src/log4net.dll
===================================================================
--- mvim/trunk/src/log4net.dll	2005-02-15 22:40:28 UTC (rev 333)
+++ mvim/trunk/src/log4net.dll	2005-02-15 22:48:41 UTC (rev 334)
@@ -1 +1 @@
-link lib/log4net.dll
\ No newline at end of file
+link ../lib/log4net.dll
\ No newline at end of file



From nestor at sheep.berlios.de  Tue Feb 15 23:49:08 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 23:49:08 +0100
Subject: [Mspace-checkins] r335 - mvim/trunk/src/Vim.Components.VimBuffer
Message-ID: <200502152249.j1FMn8tN009734@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 23:49:08 +0100 (Tue, 15 Feb 2005)
New Revision: 335

Removed:
   mvim/trunk/src/Vim.Components.VimBuffer/Model/
Log:
Deleted model.





From nestor at sheep.berlios.de  Tue Feb 15 23:50:31 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Tue, 15 Feb 2005 23:50:31 +0100
Subject: [Mspace-checkins] r336 - in mvim/trunk: . doc
Message-ID: <200502152250.j1FMoVEw009774@sheep.berlios.de>

Author: nestor
Date: 2005-02-15 23:50:30 +0100 (Tue, 15 Feb 2005)
New Revision: 336

Added:
   mvim/trunk/bin/
   mvim/trunk/lib/
   mvim/trunk/resources/
Modified:
   mvim/trunk/doc/log4net.dll
Log:
added bin


Modified: mvim/trunk/doc/log4net.dll
===================================================================
--- mvim/trunk/doc/log4net.dll	2005-02-15 22:49:08 UTC (rev 335)
+++ mvim/trunk/doc/log4net.dll	2005-02-15 22:50:30 UTC (rev 336)
@@ -1 +1 @@
-link ../src/lib/log4net.dll
\ No newline at end of file
+link ../lib/log4net.dll
\ No newline at end of file

Copied: mvim/trunk/lib (from rev 326, mvim/trunk/src/lib)

Copied: mvim/trunk/resources (from rev 326, mvim/trunk/src/resources)



From nestor at sheep.berlios.de  Thu Feb 17 09:58:20 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Thu, 17 Feb 2005 09:58:20 +0100
Subject: [Mspace-checkins] r337 - in mvim/trunk: doc lib src src/Vim.Components.VimBuffer src/Vim.Main
Message-ID: <200502170858.j1H8wKN7026616@sheep.berlios.de>

Author: nestor
Date: 2005-02-17 09:58:18 +0100 (Thu, 17 Feb 2005)
New Revision: 337

Added:
   mvim/trunk/lib/nunit.core.dll
   mvim/trunk/lib/nunit.framework.dll
   mvim/trunk/lib/nunit.util.dll
   mvim/trunk/src/Vim.Test/
Modified:
   mvim/trunk/doc/org.vim.tree
   mvim/trunk/doc/org.vim.zip
   mvim/trunk/src/Makefile.am
   mvim/trunk/src/Vim.Components.VimBuffer/IVimBufferStrategy.cs
   mvim/trunk/src/Vim.Main/Launcher.cs
Log:
Added support from NUnit tests.



Modified: mvim/trunk/doc/org.vim.tree
===================================================================
(Binary files differ)

Modified: mvim/trunk/doc/org.vim.zip
===================================================================
(Binary files differ)

Added: mvim/trunk/lib/nunit.core.dll
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/lib/nunit.core.dll
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Added: mvim/trunk/lib/nunit.framework.dll
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/lib/nunit.framework.dll
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Added: mvim/trunk/lib/nunit.util.dll
===================================================================
(Binary files differ)


Property changes on: mvim/trunk/lib/nunit.util.dll
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:mime-type
   + application/octet-stream

Modified: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-15 22:50:30 UTC (rev 336)
+++ mvim/trunk/src/Makefile.am	2005-02-17 08:58:18 UTC (rev 337)
@@ -9,8 +9,8 @@
 
 LIB_REFERENCES_BUILD=$(addprefix -reference:,$(LIB_REFERENCES))
 
-RESOURCES_REFERENCES= \
-resources/log4net.config
+RESOURCES_REFERENCES= 
+#resources/log4net.config
 
 RESOURCES_REFERENCES_BUILD=$(foreach res, $(RESOURCES_REFERENCES),$(addprefix -resource:,$(res)),$(notdir $(res)))
 

Modified: mvim/trunk/src/Vim.Components.VimBuffer/IVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/IVimBufferStrategy.cs	2005-02-15 22:50:30 UTC (rev 336)
+++ mvim/trunk/src/Vim.Components.VimBuffer/IVimBufferStrategy.cs	2005-02-17 08:58:18 UTC (rev 337)
@@ -24,7 +24,7 @@
          * Insert text in offset position.
          */
         void Insert (int offset, string text);
-
+        
         /**
          * Remove length characters, to offset position.
          */
@@ -33,7 +33,7 @@
         /**
          * Replace position offset and length to text.
          */
-        void Replace (int offset,int length, string text);
+        void Replace (int offset, int length, string text);
 
         /**
          * Get buffer or a buffer subset from offset & length.

Modified: mvim/trunk/src/Vim.Main/Launcher.cs
===================================================================
--- mvim/trunk/src/Vim.Main/Launcher.cs	2005-02-15 22:50:30 UTC (rev 336)
+++ mvim/trunk/src/Vim.Main/Launcher.cs	2005-02-17 08:58:18 UTC (rev 337)
@@ -1,5 +1,4 @@
 using System;
-using Vim.Components.VimEntry.Model;
 namespace Vim.Main {
     public class Launcher {
 /**



From nestor at sheep.berlios.de  Thu Feb 17 10:45:26 2005
From: nestor at sheep.berlios.de (Néstor Salceda at BerliOS)
Date: Thu, 17 Feb 2005 10:45:26 +0100
Subject: [Mspace-checkins] r338 - in mvim/trunk/src: . Vim.Components.VimBuffer Vim.Test
Message-ID: <200502170945.j1H9jQ9u029117@sheep.berlios.de>

Author: nestor
Date: 2005-02-17 10:45:25 +0100 (Thu, 17 Feb 2005)
New Revision: 338

Added:
   mvim/trunk/src/Vim.Test/VimBufferStrategyTest.cs
Modified:
   mvim/trunk/src/AssemblyInfo.cs.in
   mvim/trunk/src/Makefile.am
   mvim/trunk/src/Vim.Components.VimBuffer/GapVimBufferStrategy.cs
Log:
Added Unit test from VimBufferStrategy.



Modified: mvim/trunk/src/AssemblyInfo.cs.in
===================================================================
--- mvim/trunk/src/AssemblyInfo.cs.in	2005-02-17 08:58:18 UTC (rev 337)
+++ mvim/trunk/src/AssemblyInfo.cs.in	2005-02-17 09:45:25 UTC (rev 338)
@@ -4,4 +4,4 @@
 [assembly: AssemblyVersion("@VERSION@")]
 [assembly: AssemblyTitle ("MonoVim")]
 [assembly: AssemblyDescription ("A little editor, as vim.  Using Mono & GTK#")]
-[assembly: AssemblyCopyright ("Copyright (c) 2005 N?stor Salceda Alonso")]
+[assembly: AssemblyCopyright ("Copyright (c) 2005 N?stor Salceda Alonso & Sergio Rubio")]

Modified: mvim/trunk/src/Makefile.am
===================================================================
--- mvim/trunk/src/Makefile.am	2005-02-17 08:58:18 UTC (rev 337)
+++ mvim/trunk/src/Makefile.am	2005-02-17 09:45:25 UTC (rev 338)
@@ -5,7 +5,7 @@
 
 PKG_REFERENCES_BUILD=$(addprefix -pkg:,$(PKG_REFERENCES))
 
-LIB_REFERENCES = log4net.dll 
+LIB_REFERENCES = log4net.dll nunit.framework.dll
 
 LIB_REFERENCES_BUILD=$(addprefix -reference:,$(LIB_REFERENCES))
 
@@ -23,13 +23,14 @@
 Vim.Components.Gtk/*.cs\
 Vim.Components.SWF/*.cs\
 Vim.Main/Launcher.cs \
+Vim.Test/*.cs\
 AssemblyInfo.cs
 
 SOURCES_REFERENCES_BUILD=$(addprefix $(srcdir)/, $(SOURCES_REFERENCES))
 
 all:
 	$(MCS) $(PKG_REFERENCES_BUILD) $(LIB_REFERENCES_BUILD) $(RESOURCES_REFERENCES_BUILD) $(SOURCES_REFERENCES) -o MonoVim.exe
-
+	$(MCS) $(PKG_REFERENCES_BUILD) $(LIB_REFERENCES_BUILD) $(RESOURCES_REFERENCES_BUILD) $(SOURCES_REFERENCES) -t:library -o MonoVimTests.dll
 install:
 	cp MonoVim.exe /usr/local/bin
 	cp monovim /usr/local/bin

Modified: mvim/trunk/src/Vim.Components.VimBuffer/GapVimBufferStrategy.cs
===================================================================
--- mvim/trunk/src/Vim.Components.VimBuffer/GapVimBufferStrategy.cs	2005-02-17 08:58:18 UTC (rev 337)
+++ mvim/trunk/src/Vim.Components.VimBuffer/GapVimBufferStrategy.cs	2005-02-17 09:45:25 UTC (rev 338)
@@ -10,7 +10,7 @@
 using System.Text;
 
 namespace Vim.Components.VimBuffer {
-    public class GapTextBufferStrategy : IVimBufferStrategy {
+    public class GapVimBufferStrategy : IVimBufferStrategy {
         private char[] buffer = new char [0];
 
         int gapBeginOffset = 0;
@@ -134,7 +134,8 @@
         }
         
         /**
-         * Colocaci?n del gap en el buffer.
+         * Colocaci?n del gap en el buffer en la posici?n offset con la longitud
+         * length.
          */ 
         void PlaceGap (int offset, int length) {
             // Guardamos el valor viejo de la longitud del gap.

Added: mvim/trunk/src/Vim.Test/VimBufferStrategyTest.cs
===================================================================
--- mvim/trunk/src/Vim.Test/VimBufferStrategyTest.cs	2005-02-17 08:58:18 UTC (rev 337)
+++ mvim/trunk/src/Vim.Test/VimBufferStrategyTest.cs	2005-02-17 09:45:25 UTC (rev 338)
@@ -0,0 +1,54 @@
+using NUnit.Framework;
+using Vim.Components.VimBuffer;
+using System;
+
+namespace Vim.Test {
+    [TestFixture]
+    public class VimBufferStrategyTest {
+        IVimBufferStrategy vimBufferStrategy;
+        string text;
+        
+        [SetUp]
+        public void Init () {
+            vimBufferStrategy = new GapVimBufferStrategy ();
+            text = "TestingBuffer";
+            vimBufferStrategy.SetContent(text);
+        }
+        [TearDown]    
+        public void Clean () {
+            vimBufferStrategy = null;
+            text = String.Empty;
+        }
+
+        [Test]
+        public void TestLength () {
+            Assert.AreEqual (vimBufferStrategy.Length, text.Length);
+        }
+    
+        [Test]
+        public void TestItemAt () {
+            for (int i = 0; i < vimBufferStrategy.Length; i++) {
+                Assert.AreEqual (vimBufferStrategy[i], text[i]);
+            }
+        }
+
+        [Test]
+        public void TestInsert () {
+            string textInserted = "TextoInsertado";
+            vimBufferStrategy.Insert (0, textInserted);
+            text = textInserted + text;
+            TestLength ();
+            TestItemAt ();
+        }
+
+        [Test]
+        public void TestInsert1 () {
+            string textInserted = "TextoInsertado";
+            vimBufferStrategy.Insert (vimBufferStrategy.Length, textInserted);
+            text = text + textInserted;
+            TestLength ();
+            TestItemAt ();
+        }
+            
+    }
+}



